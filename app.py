import streamlit as st
import requests
import json
import pandas as pd
from datetime import datetime
import plotly.express as px
import os
import re
import docx
from io import BytesIO
import time

# ================= CONFIGURATION =================

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="NEXUS - Assistente de Comunica√ß√£o de Projetos",
    page_icon="üìã",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS Personalizado
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #1E3A8A;
        text-align: center;
        margin-bottom: 1rem;
    }
    .sub-header {
        font-size: 1.2rem;
        color: #3B82F6;
        text-align: center;
        margin-bottom: 2rem;
    }
    .feature-card {
        background-color: #F3F4F6;
        border-radius: 10px;
        padding: 20px;
        margin-bottom: 20px;
        border-left: 5px solid #3B82F6;
    }
    .result-area {
        background-color: #F0F9FF;
        border-radius: 10px;
        padding: 20px;
        margin: 20px 0;
        border: 1px solid #BAE6FD;
    }
    .sidebar-content {
        padding: 20px 10px;
    }
    .metric-card {
        background-color: #FAFAFA;
        border-radius: 8px;
        padding: 15px;
        margin: 10px 0;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    .feedback-good {
        color: #059669;
        font-weight: bold;
    }
    .feedback-bad {
        color: #DC2626;
        font-weight: bold;
    }
    .stAlert {
        margin-top: 1rem;
        margin-bottom: 1rem;
    }
    .usage-info {
        background-color: #EFF6FF;
        border-radius: 8px;
        padding: 10px;
        margin: 10px 0;
        border: 1px solid #DBEAFE;
    }
    .tone-analysis-section {
        background-color: #F0FFF4;
        border-radius: 10px;
        padding: 20px;
        margin: 20px 0;
        border: 1px solid #C6F6D5;
    }
    .tone-current {
        background-color: #E6FFFA;
        padding: 10px;
        border-radius: 5px;
        margin-bottom: 10px;
    }
    .tone-optimized {
        background-color: #F0FFF4;
        padding: 10px;
        border-radius: 5px;
        border-left: 3px solid #38A169;
    }
</style>
""", unsafe_allow_html=True)

# ================= CONSTANTS =================

# Limites ampliados para melhor experi√™ncia do usu√°rio
TOKEN_LIMIT = 100000    # Aumentado para permitir intera√ß√µes mais longas
REQUEST_LIMIT = 50      # Aumentado para permitir mais consultas por sess√£o
# Restri√ß√£o de tempo entre requisi√ß√µes removida

# Base de conhecimento sobre PMBOK 7
PMBOK7_KNOWLEDGE_BASE = {
    "princ√≠pios": [
        "1. Ser um administrador diligente, respeitoso e cuidadoso",
        "2. Criar um ambiente colaborativo da equipe do projeto",
        "3. Envolver efetivamente as partes interessadas",
        "4. Focar no valor",
        "5. Reconhecer, avaliar e responder √†s intera√ß√µes do sistema",
        "6. Demonstrar comportamentos de lideran√ßa",
        "7. Adaptar com base no contexto",
        "8. Incorporar qualidade nos processos e resultados",
        "9. Navegar na complexidade",
        "10. Otimizar respostas a riscos",
        "11. Abra√ßar adaptabilidade e resili√™ncia",
        "12. Permitir mudan√ßa para alcan√ßar o estado futuro previsto"
    ],
    
    "dom√≠nios": [
        "1. Stakeholders (Partes Interessadas): Atividades e fun√ß√µes associadas ao engajamento das partes interessadas",
        "2. Team (Equipe): Atividades e fun√ß√µes associadas ao apoio e desenvolvimento da equipe do projeto",
        "3. Development Approach and Life Cycle (Abordagem de Desenvolvimento e Ciclo de Vida): Atividades e fun√ß√µes associadas √† abordagem de desenvolvimento e ciclo de vida",
        "4. Planning (Planejamento): Atividades e fun√ß√µes associadas ao planejamento do projeto",
        "5. Project Work (Trabalho do Projeto): Atividades e fun√ß√µes associadas ao estabelecimento dos processos para executar o trabalho do projeto",
        "6. Delivery (Entrega): Atividades e fun√ß√µes associadas √† entrega do escopo e qualidade do projeto",
        "7. Measurement (Mensura√ß√£o): Atividades e fun√ß√µes associadas √† avalia√ß√£o do desempenho do projeto e tomada de a√ß√µes para manter um desempenho aceit√°vel",
        "8. Uncertainty (Incerteza): Atividades e fun√ß√µes associadas ao risco e incerteza"
    ],
    
    "mudancas_principais": [
        "Transi√ß√£o de processos para princ√≠pios e dom√≠nios de performance",
        "Foco em entrega de valor em vez de apenas escopo, tempo e custo",
        "Maior √™nfase em adaptabilidade e contexto",
        "Abordagem de sistemas em vez de processos isolados",
        "Reconhecimento de m√∫ltiplas abordagens (adaptativa, preditiva, h√≠brida)",
        "Maior √™nfase na lideran√ßa e soft skills",
        "Vis√£o hol√≠stica do gerenciamento de projetos"
    ],
    
    "metodologias": {
        "preditiva": "Abordagem tradicional, em cascata ou waterfall, onde o escopo, cronograma e custo s√£o determinados nas fases iniciais",
        "adaptativa": "Abordagens √°geis como Scrum, Kanban, XP, onde o trabalho √© realizado em itera√ß√µes com feedback frequente",
        "h√≠brida": "Combina√ß√£o de elementos preditivos e adaptativos, personalizada para necessidades espec√≠ficas do projeto"
    }
}

# System prompt atualizado com conte√∫do mais detalhado e PMBOK 7
system_prompt = """
Voc√™ √© o NEXUS, um assistente especializado em comunica√ß√£o e gerenciamento de projetos. Seu objetivo √© ajudar gerentes de projetos, l√≠deres de equipe e outros profissionais a comunicar-se de forma clara, eficaz e profissional em diversos contextos de projetos.

Voc√™ possui seis habilidades principais:

1. Gerador de Comunica√ß√µes Estruturadas: Criar e-mails profissionais, relat√≥rios de status e comunicados formais.
2. Assistente de Reuni√µes: Gerar agendas detalhadas, atas e resumos de reuni√µes, e estruturar follow-ups.
3. Tradutor de Jarg√£o T√©cnico: Simplificar linguagem t√©cnica, adaptar comunica√ß√µes para diferentes p√∫blicos e traduzir requisitos t√©cnicos.
4. Facilitador de Feedback: Estruturar feedback construtivo, transformar cr√≠ticas em sugest√µes e criar roteiros para conversas dif√≠ceis.
5. Detector de Riscos de Comunica√ß√£o: Analisar comunica√ß√µes, sugerir alternativas mais claras e avaliar adequa√ß√£o ao p√∫blico.
6. Consultor PMBOK 7: Fornecer orienta√ß√µes e esclarecer d√∫vidas sobre gerenciamento de projetos conforme o PMBOK 7.

Especialmente para d√∫vidas sobre PMBOK 7, voc√™ tem conhecimento aprofundado sobre:
- Os 12 Princ√≠pios de Gerenciamento de Projetos do PMBOK 7
- Os 8 Dom√≠nios de Performance de Projeto
- A abordagem baseada em valor e resultados
- A mudan√ßa de processos para princ√≠pios e dom√≠nios
- M√©todos adaptativos, preditivos e h√≠bridos
- Aplica√ß√µes pr√°ticas das orienta√ß√µes do PMBOK 7

Ao responder, voc√™ deve:
- Fornecer conte√∫do detalhado e abrangente
- Usar linguagem profissional e tom adequado para o contexto
- Estruturar o conte√∫do de forma l√≥gica e clara
- Oferecer exemplos concretos e contextualizados
- Considerar m√∫ltiplas perspectivas e cen√°rios
- Incluir elementos adicionais pertinentes como introdu√ß√µes e conclus√µes
- Focar em comunica√ß√£o eficaz e construtiva
- Adaptar o n√≠vel de detalhe t√©cnico ao p√∫blico-alvo

Suas respostas devem ser completas, robustas e prontas para uso profissional.
"""

# Defini√ß√£o de funcionalidades dispon√≠veis (incluindo PMBOK 7)
feature_options = {
    "Gerador de Comunica√ß√µes Estruturadas": {
        "description": "Crie e-mails profissionais, relat√≥rios de status e comunicados formais a partir de pontos-chave.",
        "icon": "üìß",
        "subtypes": ["E-mail Profissional", "Relat√≥rio de Status", "Comunicado Formal"]
    },
    "Assistente de Reuni√µes": {
        "description": "Gere agendas detalhadas, atas de reuni√µes e mensagens de follow-up estruturadas.",
        "icon": "üìÖ",
        "subtypes": ["Agenda de Reuni√£o", "Ata/Resumo de Reuni√£o", "Follow-up de Reuni√£o"]
    },
    "Tradutor de Jarg√£o T√©cnico": {
        "description": "Simplifique linguagem t√©cnica e adapte comunica√ß√µes para diferentes p√∫blicos.",
        "icon": "üîÑ",
        "subtypes": ["Simplifica√ß√£o de Documento T√©cnico", "Adapta√ß√£o para Executivos", "Adapta√ß√£o para Clientes", "Adapta√ß√£o para Equipe T√©cnica"]
    },
    "Facilitador de Feedback": {
        "description": "Estruture feedback construtivo e prepare roteiros para conversas dif√≠ceis.",
        "icon": "üí¨",
        "subtypes": ["Feedback de Desempenho", "Feedback sobre Entreg√°veis", "Roteiro para Conversa Dif√≠cil"]
    },
    "Detector de Riscos de Comunica√ß√£o": {
        "description": "Analise comunica√ß√µes para identificar ambiguidades e problemas potenciais.",
        "icon": "üîç",
        "subtypes": ["An√°lise de E-mail", "An√°lise de Comunicado", "An√°lise de Proposta", "An√°lise de Documento de Requisitos"]
    },
    # Nova funcionalidade PMBOK 7
    "Consultor PMBOK 7": {
        "description": "Esclare√ßa d√∫vidas e obtenha orienta√ß√µes sobre gerenciamento de projetos conforme o PMBOK 7.",
        "icon": "üìö",
        "subtypes": ["Princ√≠pios de Gerenciamento", "Dom√≠nios de Performance", "Adapta√ß√£o de Metodologias", "Ferramentas e T√©cnicas", "Melhores Pr√°ticas"]
    }
}
# ================= SESSION STATE INITIALIZATION =================

# Inicializa√ß√£o da sess√£o
if 'api_key_configured' not in st.session_state:
    st.session_state.api_key_configured = True
    # Configurar API key automaticamente a partir dos secrets
    if st.secrets.get("OPENAI_API_KEY"):
        st.session_state.api_key = st.secrets.get("OPENAI_API_KEY")
    else:
        st.session_state.api_key = None
        st.session_state.api_key_configured = False

if 'usage_data' not in st.session_state:
    st.session_state.usage_data = []
if 'generated_content' not in st.session_state:
    st.session_state.generated_content = ""
if 'history' not in st.session_state:
    st.session_state.history = []
if 'token_count' not in st.session_state:
    st.session_state.token_count = 0
if 'request_count' not in st.session_state:
    st.session_state.request_count = 0
if 'last_request_time' not in st.session_state:
    st.session_state.last_request_time = 0
if 'session_id' not in st.session_state:
    st.session_state.session_id = datetime.now().strftime("%Y%m%d%H%M%S") + str(hash(datetime.now()))[:5]
if 'current_feature' not in st.session_state:
    st.session_state.current_feature = ""
if 'optimized_content' not in st.session_state:
    st.session_state.optimized_content = ""

# ================= HELPER FUNCTIONS =================

def enrich_pmbok_prompt(prompt, pmbok_topic):
    """Enriquece o prompt com informa√ß√µes relevantes do PMBOK 7 baseado no t√≥pico selecionado"""
    
    additional_info = ""
    
    if "Princ√≠pios" in pmbok_topic:
        additional_info += "\n\nPrinc√≠pios de Gerenciamento do PMBOK 7:\n"
        additional_info += "\n".join(PMBOK7_KNOWLEDGE_BASE["princ√≠pios"])
        
    elif "Dom√≠nios" in pmbok_topic:
        additional_info += "\n\nDom√≠nios de Performance do PMBOK 7:\n"
        additional_info += "\n".join(PMBOK7_KNOWLEDGE_BASE["dom√≠nios"])
        
    elif "Adapta√ß√£o" in pmbok_topic:
        additional_info += "\n\nAbordagens de Desenvolvimento no PMBOK 7:\n"
        for k, v in PMBOK7_KNOWLEDGE_BASE["metodologias"].items():
            additional_info += f"- {k.capitalize()}: {v}\n"
            
    elif "Melhores Pr√°ticas" in pmbok_topic:
        additional_info += "\n\nMudan√ßas Principais no PMBOK 7:\n"
        additional_info += "\n".join([f"- {item}" for item in PMBOK7_KNOWLEDGE_BASE["mudancas_principais"]])
    
    # Adicionar a informa√ß√£o relevante ao prompt
    enhanced_prompt = prompt + additional_info
    return enhanced_prompt

# Fun√ß√£o para gerar conte√∫do via API OpenAI
def generate_content(prompt, model="gpt-3.5-turbo", temperature=0.7):
    if not st.session_state.api_key_configured or not st.session_state.api_key:
        return "API n√£o configurada. Por favor, contate o administrador."
    
    # Verificar limites
    if st.session_state.token_count >= TOKEN_LIMIT:
        return "Voc√™ atingiu o limite de tokens para esta sess√£o. Por favor, tente novamente mais tarde."
    
    if st.session_state.request_count >= REQUEST_LIMIT:
        return "Voc√™ atingiu o limite de requisi√ß√µes para esta sess√£o. Por favor, tente novamente mais tarde."
    
    try:
        with st.spinner("Gerando conte√∫do..."):
            # Atualizar o timestamp da √∫ltima requisi√ß√£o
            st.session_state.last_request_time = time.time()
            
            # Incrementar contador de requisi√ß√µes
            st.session_state.request_count += 1
            
            # Configurar requisi√ß√£o direta √† API
            headers = {
                "Content-Type": "application/json",
                "Authorization": f"Bearer {st.session_state.api_key}"
            }
            
            # Adicionar mensagem do sistema e prompt do usu√°rio
            payload = {
                "model": model,
                "messages": [
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": prompt}
                ],
                "temperature": temperature,
                "max_tokens": 4000  # Aumentado para respostas mais completas
            }
            
            # Fazer a requisi√ß√£o √† API
            response = requests.post(
                "https://api.openai.com/v1/chat/completions",
                headers=headers,
                data=json.dumps(payload),
                timeout=60
            )
            
            # Processar a resposta
            if response.status_code == 200:
                result = response.json()
                content = result['choices'][0]['message']['content']
                
                # Atualizar contadores de tokens
                prompt_tokens = result['usage']['prompt_tokens']
                completion_tokens = result['usage']['completion_tokens']
                total_tokens = result['usage']['total_tokens']
                st.session_state.token_count += total_tokens
                
                # Registrar uso
                st.session_state.usage_data.append({
                    'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                    'feature': st.session_state.current_feature,
                    'tokens': total_tokens,
                    'model': model,
                    'session_id': st.session_state.session_id
                })
                
                # Adicionar ao hist√≥rico
                st.session_state.history.append({
                    'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                    'feature': st.session_state.current_feature,
                    'input': prompt[:100] + "..." if len(prompt) > 100 else prompt,  # Resumido para economizar espa√ßo
                    'output': content,
                    'model': model,
                    'session_id': st.session_state.session_id
                })
                
                return content
            else:
                return f"Erro na API (Status {response.status_code}): {response.text}"
        
    except Exception as e:
        return f"Erro ao gerar conte√∫do: {str(e)}"

# Fun√ß√£o para an√°lise de tom
def analyze_tone(text, target_audience, desired_impact):
    """
    Analisa o tom do texto e sugere melhorias baseadas no p√∫blico-alvo
    e no impacto emocional desejado.
    
    Args:
        text (str): O texto a ser analisado
        target_audience (str): O p√∫blico-alvo (cliente, equipe, executivos)
        desired_impact (str): O impacto desejado (tranquilizar, motivar, urg√™ncia)
        
    Returns:
        dict: An√°lise do tom e texto otimizado
    """
    if not st.session_state.api_key_configured or not st.session_state.api_key:
        return {
            'current_tone': "API n√£o configurada",
            'emotional_impact': "N√£o foi poss√≠vel analisar",
            'optimized_text': text
        }
    
    # Verificar limites
    if st.session_state.token_count >= TOKEN_LIMIT:
        return {
            'current_tone': "Limite de tokens atingido",
            'emotional_impact': "N√£o foi poss√≠vel analisar",
            'optimized_text': text
        }
    
    if st.session_state.request_count >= REQUEST_LIMIT:
        return {
            'current_tone': "Limite de requisi√ß√µes atingido",
            'emotional_impact': "N√£o foi poss√≠vel analisar",
            'optimized_text': text
        }
    
    try:
        with st.spinner("Analisando tom da comunica√ß√£o..."):
            # Atualizar o timestamp da √∫ltima requisi√ß√£o
            st.session_state.last_request_time = time.time()
            
            # Incrementar contador de requisi√ß√µes
            st.session_state.request_count += 1
            
            headers = {
                "Content-Type": "application/json",
                "Authorization": f"Bearer {st.session_state.api_key}"
            }
            
            prompt = f"""
            Analise o tom do seguinte texto destinado a '{target_audience}':
            
            "{text}"
            
            Forne√ßa:
            1. Uma an√°lise do tom atual (formal, informal, urgente, t√©cnico, etc.)
            2. O prov√°vel impacto emocional no leitor
            3. Uma vers√£o otimizada do texto para ter o impacto de '{desired_impact}'
            
            Retorne a resposta como um dicion√°rio Python com as chaves: 'current_tone', 'emotional_impact', 'optimized_text'
            """
            
            payload = {
                "model": "gpt-3.5-turbo",
                "messages": [
                    {"role": "system", "content": "Voc√™ √© um especialista em an√°lise de comunica√ß√£o e impacto emocional em contexto profissional."},
                    {"role": "user", "content": prompt}
                ],
                "temperature": 0.7,
                "max_tokens": 4000  # Aumentado para respostas mais completas
            }
            
            response = requests.post(
                "https://api.openai.com/v1/chat/completions",
                headers=headers,
                data=json.dumps(payload),
                timeout=60
            )
            
            if response.status_code == 200:
                result = response.json()
                response_text = result['choices'][0]['message']['content']
                
                # Atualizar contadores de tokens
                prompt_tokens = result['usage']['prompt_tokens']
                completion_tokens = result['usage']['completion_tokens']
                total_tokens = result['usage']['total_tokens']
                st.session_state.token_count += total_tokens
                
                # Registrar uso
                st.session_state.usage_data.append({
                    'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                    'feature': "An√°lise de Tom",
                    'tokens': total_tokens,
                    'model': "gpt-3.5-turbo",
                    'session_id': st.session_state.session_id
                })
                
                # Tenta extrair o dicion√°rio Python da resposta
                dict_pattern = r'\{.*\}'
                dict_match = re.search(dict_pattern, response_text, re.DOTALL)
                
                if dict_match:
                    dict_str = dict_match.group(0)
                    try:
                        # Substitui aspas simples por aspas duplas para compatibilidade com JSON
                        dict_str = dict_str.replace("'", "\"")
                        result = json.loads(dict_str)
                    except json.JSONDecodeError:
                        # Fallback se o parsing falhar
                        result = {
                            'current_tone': 'N√£o foi poss√≠vel analisar precisamente',
                            'emotional_impact': 'N√£o foi poss√≠vel analisar precisamente',
                            'optimized_text': text  # Mant√©m o texto original
                        }
                else:
                    # Se n√£o puder extrair um dicion√°rio, cria um resultado estruturado manualmente
                    lines = response_text.split('\n')
                    result = {
                        'current_tone': next((line.replace('1.', '').strip() for line in lines if '1.' in line), 'N√£o identificado'),
                        'emotional_impact': next((line.replace('2.', '').strip() for line in lines if '2.' in line), 'N√£o identificado'),
                        'optimized_text': text  # Default para o texto original
                    }
                    
                    # Tenta encontrar o texto otimizado
                    optimized_section = response_text.split('3.')
                    if len(optimized_section) > 1:
                        result['optimized_text'] = optimized_section[1].strip()
                
                return result
            else:
                return {
                    'current_tone': f"Erro na API (Status {response.status_code})",
                    'emotional_impact': "N√£o foi poss√≠vel analisar",
                    'optimized_text': text
                }
                
    except Exception as e:
        return {
            'current_tone': f"Erro na an√°lise: {str(e)}",
            'emotional_impact': "N√£o foi poss√≠vel analisar",
            'optimized_text': text
        }

# Interface para an√°lise de tom

def create_tone_analysis_section(content):
    """
    Cria a se√ß√£o de an√°lise de tom na interface
    
    Args:
        content (str): O texto gerado a ser analisado
        
    Returns:
        None: Atualiza a UI diretamente
    """
    st.markdown("## üé≠ An√°lise de Tom e Otimiza√ß√£o")
    
    # Inicializar estado para os inputs se n√£o existirem
    if 'tone_audience' not in st.session_state:
        st.session_state.tone_audience = "Cliente"
    if 'tone_impact' not in st.session_state:
        st.session_state.tone_impact = "Tranquilizar"
    if 'tone_analysis_result' not in st.session_state:
        st.session_state.tone_analysis_result = None
    
    with st.expander("Analisar e otimizar o tom da comunica√ß√£o", expanded=True):
        col1, col2 = st.columns(2)
        
        with col1:
            target_audience = st.selectbox(
                "P√∫blico-alvo:",
                ["Cliente", "Equipe t√©cnica", "Ger√™ncia", "Executivos", "Stakeholders", "P√∫blico geral"],
                key="tone_audience"
            )
        
        with col2:
            desired_impact = st.selectbox(
                "Impacto desejado:",
                ["Tranquilizar", "Motivar", "Gerar urg√™ncia", "Informar objetivamente", 
                 "Persuadir", "Demonstrar empatia", "Mostrar autoridade"],
                key="tone_impact"
            )
        
        # Usar um callback para an√°lise de tom em vez de verificar clique de bot√£o
        def analyze_tone_callback():
            with st.spinner("Analisando tom da comunica√ß√£o..."):
                st.session_state.tone_analysis_result = analyze_tone(
                    content, 
                    st.session_state.tone_audience, 
                    st.session_state.tone_impact
                )
        
        st.button(
            "Analisar e otimizar tom", 
            key="analyze_tone_btn", 
            on_click=analyze_tone_callback
        )
        
        # Exibir resultados se dispon√≠veis
        if st.session_state.tone_analysis_result:
            tone_analysis = st.session_state.tone_analysis_result
            
            st.markdown('<div class="tone-analysis-section">', unsafe_allow_html=True)
            
            st.markdown("### An√°lise do tom atual")
            
            col1, col2 = st.columns(2)
            with col1:
                st.markdown(f'<div class="tone-current"><strong>Tom atual:</strong> {tone_analysis["current_tone"]}</div>', unsafe_allow_html=True)
            
            with col2:
                st.markdown(f'<div class="tone-current"><strong>Impacto emocional prov√°vel:</strong> {tone_analysis["emotional_impact"]}</div>', unsafe_allow_html=True)
            
            st.markdown("### Vers√£o otimizada para o impacto desejado")
            st.markdown(f'<div class="tone-optimized">{tone_analysis["optimized_text"]}</div>', unsafe_allow_html=True)
            
            # Armazenar o texto otimizado na sess√£o
            st.session_state.optimized_content = tone_analysis["optimized_text"]
            
            col1, col2 = st.columns(2)
            with col1:
                # Download como texto
                st.download_button(
                    label="üìÑ Baixar vers√£o otimizada (TXT)",
                    data=tone_analysis["optimized_text"],
                    file_name=f"comunicacao_otimizada_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                    mime="text/plain"
                )
            
            with col2:
                # Download como DOCX
                docx_buffer = export_as_docx(tone_analysis["optimized_text"], "Comunica√ß√£o Otimizada")
                st.download_button(
                    label="üìù Baixar vers√£o otimizada (DOCX)",
                    data=docx_buffer,
                    file_name=f"comunicacao_otimizada_{datetime.now().strftime('%Y%m%d_%H%M%S')}.docx",
                    mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                )
            
            st.markdown('</div>', unsafe_allow_html=True)

# Fun√ß√£o para exportar conte√∫do como DOCX
def export_as_docx(content, filename="documento"):
    doc = docx.Document()
    
    # Adicionar t√≠tulo
    doc.add_heading(f"{filename}", 0)
    
    # Dividir por linhas e adicionar par√°grafos
    paragraphs = content.split('\n')
    for para in paragraphs:
        if para.strip() == "":
            continue
        
        # Verificar se √© um cabe√ßalho
        if re.match(r'^#{1,6}\s+', para):
            # Extrair o n√≠vel do cabe√ßalho e o texto
            header_match = re.match(r'^(#{1,6})\s+(.*)', para)
            if header_match:
                level = min(len(header_match.group(1)), 9)  # Limitar a 9 para evitar erro
                text = header_match.group(2)
                doc.add_heading(text, level)
        else:
            doc.add_paragraph(para)
    
    # Salvar para um buffer em mem√≥ria
    buffer = BytesIO()
    doc.save(buffer)
    buffer.seek(0)
    
    return buffer

    # ================= SIDEBAR =================

# Sidebar para configura√ß√£o
with st.sidebar:
    st.markdown('<div class="sidebar-content">', unsafe_allow_html=True)
    st.image("https://via.placeholder.com/150x150.png?text=NEXUS", width=150)
    
    # Mostrar status da API
    st.markdown("### Status")
    if st.session_state.api_key_configured:
        st.success("‚úÖ API configurada automaticamente")
    else:
        st.error("‚ùå API n√£o configurada. Contate o administrador.")
    
    # Exibir estat√≠sticas de uso
    st.markdown("### Seu Uso")
    
    col1, col2 = st.columns(2)
    with col1:
        st.markdown('<div class="metric-card">', unsafe_allow_html=True)
        st.metric("Requisi√ß√µes", f"{st.session_state.request_count}/{REQUEST_LIMIT}")
        st.markdown('</div>', unsafe_allow_html=True)
    
    with col2:
        st.markdown('<div class="metric-card">', unsafe_allow_html=True)
        st.metric("Tokens", f"{st.session_state.token_count}/{TOKEN_LIMIT}")
        st.markdown('</div>', unsafe_allow_html=True)
    
    # Barras de progresso
    st.progress(st.session_state.request_count / REQUEST_LIMIT)
    st.caption("Uso de requisi√ß√µes")
    
    st.progress(st.session_state.token_count / TOKEN_LIMIT)
    st.caption("Uso de tokens")
    
    # Informa√ß√µes de sess√£o (apenas para rastreamento)
    st.markdown('<div class="usage-info">', unsafe_allow_html=True)
    st.caption(f"ID da sess√£o: {st.session_state.session_id}")
    st.caption(f"In√≠cio: {datetime.fromtimestamp(st.session_state.last_request_time).strftime('%H:%M:%S') if st.session_state.last_request_time > 0 else 'N/A'}")
    st.markdown('</div>', unsafe_allow_html=True)
    
    # Feedback
    st.markdown("### Feedback")
    feedback = st.radio("Como est√° sua experi√™ncia?", ["üòÄ Excelente", "üôÇ Boa", "üòê Neutra", "üôÅ Ruim", "üòû P√©ssima"])
    feedback_text = st.text_area("Coment√°rios adicionais")
    
    if st.button("Enviar Feedback"):
        st.success("Feedback enviado. Obrigado por nos ajudar a melhorar!")
    
    st.markdown("</div>", unsafe_allow_html=True)
    
    # Informa√ß√£o sobre limites de uso
    st.markdown("---")
    st.caption("Esta √© uma vers√£o aprimorada do NEXUS com limites expandidos. Para uso sem limites, implemente o NEXUS em seu pr√≥prio ambiente.")

# ================= MAIN INTERFACE =================

# Interface principal
st.markdown('<h1 class="main-header">NEXUS</h1>', unsafe_allow_html=True)
st.markdown('<p class="sub-header">Comunica√ß√£o de projetos clara, eficaz e profissional</p>', unsafe_allow_html=True)

# Mensagem sobre vers√£o aprimorada
st.info(f"""
**Vers√£o NEXUS Aprimorada**
Esta vers√£o do NEXUS possui limites expandidos para melhor experi√™ncia:
- At√© {REQUEST_LIMIT} requisi√ß√µes por sess√£o
- At√© {TOKEN_LIMIT} tokens por sess√£o
- Respostas mais detalhadas e completas
- Sem espera entre requisi√ß√µes
""")

# Hist√≥rico de gera√ß√µes recentes
if st.session_state.history:
    with st.expander("Hist√≥rico de Gera√ß√µes Recentes", expanded=False):
        for i, item in enumerate(reversed(st.session_state.history[-5:])):  # Ampliado para 5 itens mais recentes
            st.markdown(f"**{item['timestamp']} - {item['feature']}**")
            if st.button(f"Carregar este conte√∫do ‚Ü©Ô∏è", key=f"load_{i}"):
                st.session_state.current_feature = item['feature']
                st.session_state.generated_content = item['output']
                st.experimental_rerun()
            st.markdown("---")

# Sele√ß√£o de funcionalidade
# Organizar op√ß√µes em colunas
col1, col2 = st.columns(2)

count = 0
for feature, details in feature_options.items():
    if count % 2 == 0:
        with col1:
            with st.expander(f"{details['icon']} {feature}", expanded=False):
                st.markdown(f"**{details['description']}**")
                if st.button(f"Usar {feature}", key=f"select_{feature}"):
                    st.session_state.current_feature = feature
    else:
        with col2:
            with st.expander(f"{details['icon']} {feature}", expanded=False):
                st.markdown(f"**{details['description']}**")
                if st.button(f"Usar {feature}", key=f"select_{feature}"):
                    st.session_state.current_feature = feature
    count += 1

    # ================= FEATURE INTERFACE =================

# Se uma funcionalidade foi selecionada na sess√£o atual ou anteriormente
if st.session_state.current_feature:
    current_feature = st.session_state.current_feature
    feature_details = feature_options[current_feature]
    
    st.markdown(f"## {feature_details['icon']} {current_feature}")
    
    # Verificar limites antes de mostrar a interface (sem verificar tempo entre requisi√ß√µes)
    if st.session_state.token_count >= TOKEN_LIMIT:
        st.error(f"Voc√™ atingiu o limite de {TOKEN_LIMIT} tokens para esta sess√£o. Por favor, tente novamente mais tarde.")
    elif st.session_state.request_count >= REQUEST_LIMIT:
        st.error(f"Voc√™ atingiu o limite de {REQUEST_LIMIT} requisi√ß√µes para esta sess√£o. Por favor, tente novamente mais tarde.")
    else:
        # Interface espec√≠fica da funcionalidade
        with st.form(key=f"{current_feature}_form"):
            st.markdown(f"**{feature_details['description']}**")
            
            # Campo de subtipo
            subtype = st.selectbox("Tipo de Comunica√ß√£o", feature_details['subtypes'])
            
            # Campos comuns a todas as funcionalidades (exceto PMBOK que tem campos espec√≠ficos)
            if current_feature != "Consultor PMBOK 7":
                context = st.text_area("Contexto do Projeto", 
                                    help="Descreva o projeto, fase atual e informa√ß√µes relevantes",
                                    height=100,
                                    placeholder="Ex: Projeto de desenvolvimento do aplicativo mobile, fase de testes")
            
            # Campos espec√≠ficos por funcionalidade
            prompt = ""
            
            if current_feature == "Gerador de Comunica√ß√µes Estruturadas":
                audience = st.text_input("P√∫blico-alvo", 
                                    help="Para quem esta comunica√ß√£o ser√° enviada (equipe, cliente, stakeholder)",
                                    placeholder="Ex: Cliente, diretor de marketing da empresa XYZ")
                key_points = st.text_area("Pontos-chave", 
                                        help="Liste os principais pontos que devem ser inclu√≠dos na comunica√ß√£o",
                                        height=150,
                                        placeholder="Ex: Atraso de 3 dias devido a bugs na integra√ß√£o; Plano de recupera√ß√£o com recursos adicionais")
                tone = st.select_slider("Tom da Comunica√ß√£o", 
                                    options=["Muito Formal", "Formal", "Neutro", "Amig√°vel", "Casual"],
                                    value="Neutro")
                
                prompt = f"""
                Gere um {subtype} com base nas seguintes informa√ß√µes:
                
                Contexto do Projeto: {context}
                P√∫blico-alvo: {audience}
                Pontos-chave: {key_points}
                Tom desejado: {tone}
                
                Formate a sa√≠da adequadamente para um {subtype}, incluindo assunto/t√≠tulo e estrutura apropriada.
                """
                
            elif current_feature == "Assistente de Reuni√µes":
                participants = st.text_area("Participantes", 
                                        help="Liste os participantes e suas fun√ß√µes",
                                        height=100,
                                        placeholder="Ex: Jo√£o Silva (Gerente de Projeto), Maria Costa (Desenvolvedora Frontend)")
                topics = st.text_area("T√≥picos a serem abordados", 
                                    help="Liste os t√≥picos que precisam ser discutidos",
                                    height=150,
                                    placeholder="Ex: Atualiza√ß√£o do cronograma, Bugs pendentes, Feedback do cliente")
                duration = st.number_input("Dura√ß√£o (minutos)", min_value=15, max_value=240, value=60, step=15)
                
                if subtype == "Agenda de Reuni√£o":
                    prompt = f"""
                    Crie uma agenda detalhada para uma reuni√£o de {duration} minutos com base nas seguintes informa√ß√µes:
                    
                    Contexto do Projeto: {context}
                    Participantes: {participants}
                    T√≥picos a serem abordados: {topics}
                    
                    Inclua aloca√ß√£o de tempo para cada item, respons√°veis e objetivos claros.
                    """
                elif subtype == "Ata/Resumo de Reuni√£o":
                    decisions = st.text_area("Decis√µes tomadas", 
                                        help="Liste as principais decis√µes tomadas durante a reuni√£o",
                                        height=100,
                                        placeholder="Ex: Aprova√ß√£o do novo design, Extens√£o do prazo em 1 semana")
                    actions = st.text_area("A√ß√µes acordadas", 
                                        help="Liste as a√ß√µes acordadas, respons√°veis e prazos",
                                        height=100,
                                        placeholder="Ex: Jo√£o ir√° corrigir o bug #123 at√© amanh√£, Maria criar√° novos componentes at√© sexta")
                    
                    prompt = f"""
                    Crie uma ata/resumo detalhado para uma reuni√£o de {duration} minutos com base nas seguintes informa√ß√µes:
                    
                    Contexto do Projeto: {context}
                    Participantes: {participants}
                    T√≥picos abordados: {topics}
                    Decis√µes tomadas: {decisions}
                    A√ß√µes acordadas: {actions}
                    
                    Organize por t√≥picos, destacando claramente decis√µes e pr√≥ximos passos com respons√°veis.
                    """
                else:  # Follow-up
                    meeting_outcome = st.text_area("Resultado da reuni√£o", 
                                                help="Resuma os principais resultados da reuni√£o",
                                                height=100,
                                                placeholder="Ex: Definidas as prioridades para o pr√≥ximo sprint e resolvidos os bloqueios atuais")
                    action_items = st.text_area("Itens de a√ß√£o", 
                                            help="Liste os itens de a√ß√£o, respons√°veis e prazos",
                                            height=100,
                                            placeholder="Ex: Jo√£o: revis√£o de c√≥digo at√© 25/03; Maria: implementa√ß√£o da nova feature at√© 27/03")
                    
                    prompt = f"""
                    Crie uma mensagem de follow-up para uma reuni√£o com base nas seguintes informa√ß√µes:
                    
                    Contexto do Projeto: {context}
                    Participantes: {participants}
                    T√≥picos abordados: {topics}
                    Resultado da reuni√£o: {meeting_outcome}
                    Itens de a√ß√£o: {action_items}
                    
                    A mensagem deve agradecer a participa√ß√£o, resumir os principais pontos, detalhar pr√≥ximos passos
                    com respons√°veis e prazos, e solicitar confirma√ß√£o/feedback conforme apropriado.
                    """
                    
            elif current_feature == "Tradutor de Jarg√£o T√©cnico":
                technical_content = st.text_area("Conte√∫do T√©cnico", 
                                            help="Cole aqui o texto t√©cnico que precisa ser traduzido",
                                            height=200,
                                            placeholder="Ex: A implementa√ß√£o do Redux utiliza reducers imut√°veis para gerenciar o estado global da aplica√ß√£o...")
                audience = st.selectbox("P√∫blico-alvo", 
                                    ["Executivos", "Clientes n√£o-t√©cnicos", "Equipe de Neg√≥cios", "Equipe T√©cnica Junior"])
                key_concepts = st.text_input("Conceitos-chave a preservar", 
                                        help="Liste conceitos t√©cnicos que devem ser mantidos mesmo se simplificados",
                                        placeholder="Ex: gerenciamento de estado, API, front-end")
                
                prompt = f"""
                Traduza/adapte o seguinte conte√∫do t√©cnico para um p√∫blico de {audience} com base nas seguintes informa√ß√µes:
                
                Contexto do Projeto: {context}
                Conte√∫do T√©cnico Original: {technical_content}
                Conceitos-chave a preservar: {key_concepts}
                
                Para {audience}, foque em: 
                - {'Impacto nos neg√≥cios e resultados de alto n√≠vel' if audience == 'Executivos' else ''}
                - {'Benef√≠cios e funcionalidades em linguagem acess√≠vel' if audience == 'Clientes n√£o-t√©cnicos' else ''}
                - {'Conex√£o com objetivos de neg√≥cios e processos' if audience == 'Equipe de Neg√≥cios' else ''}
                - {'Explica√ß√µes t√©cnicas mais detalhadas, mas com conceitos explicados' if audience == 'Equipe T√©cnica Junior' else ''}
                
                Mantenha a precis√£o conceitual mesmo simplificando a linguagem.
                Forne√ßa uma explica√ß√£o completa e detalhada, com exemplos e analogias apropriadas para o p√∫blico.
                """
                
            elif current_feature == "Facilitador de Feedback":
                situation = st.text_area("Situa√ß√£o", 
                                    help="Descreva a situa√ß√£o espec√≠fica para a qual voc√™ precisa fornecer feedback",
                                    height=150,
                                    placeholder="Ex: Atraso na entrega de componentes para o projeto principal...")
                strengths = st.text_area("Pontos Fortes", 
                                    help="Liste aspectos positivos que devem ser destacados",
                                    height=100,
                                    placeholder="Ex: Qualidade do c√≥digo entregue, comunica√ß√£o proativa de desafios")
                areas_for_improvement = st.text_area("√Åreas para Melhoria", 
                                                help="Liste aspectos que precisam ser melhorados",
                                                height=100,
                                                placeholder="Ex: Estimativas de tempo irrealistas, falha em pedir ajuda quando bloqueado")
                relationship = st.selectbox("Rela√ß√£o com o Receptor", 
                                        ["Membro da equipe direto", "Colega de mesmo n√≠vel", "Superior hier√°rquico", "Cliente", "Fornecedor"])
                
                prompt = f"""
                Estruture um {subtype} construtivo e eficaz com base nas seguintes informa√ß√µes:
                
                Contexto do Projeto: {context}
                Situa√ß√£o espec√≠fica: {situation}
                Pontos fortes a destacar: {strengths}
                √Åreas para melhoria: {areas_for_improvement}
                Rela√ß√£o com o receptor: {relationship}
                
                O feedback deve:
                - Ser espec√≠fico e baseado em comportamentos observ√°veis
                - Equilibrar aspectos positivos e √°reas de melhoria
                - Incluir exemplos concretos
                - Oferecer sugest√µes acion√°veis
                - Usar tom apropriado para a rela√ß√£o ({relationship})
                - Focar em crescimento e desenvolvimento, n√£o em cr√≠tica
                
                Formate como um roteiro/script detalhado que o usu√°rio pode seguir na conversa ou adaptar para uma comunica√ß√£o escrita.
                Adicione observa√ß√µes e dicas de comunica√ß√£o n√£o-verbal quando relevante.
                """
                
            elif current_feature == "Detector de Riscos de Comunica√ß√£o":
                content_to_analyze = st.text_area("Conte√∫do para An√°lise", 
                                                help="Cole aqui o texto que voc√™ deseja analisar quanto a riscos de comunica√ß√£o",
                                                height=200,
                                                placeholder="Ex: Devido a circunst√¢ncias imprevistas no desenvolvimento, alguns recursos podem sofrer atrasos...")
                audience = st.text_input("P√∫blico-alvo", 
                                    help="Descreva quem receber√° esta comunica√ß√£o",
                                    placeholder="Ex: Cliente executivo com pouco conhecimento t√©cnico")
                stakes = st.select_slider("Import√¢ncia da Comunica√ß√£o", 
                                        options=["Baixa", "M√©dia", "Alta", "Cr√≠tica"],
                                        value="M√©dia")
                
                prompt = f"""
                Analise o seguinte {subtype} quanto a riscos de comunica√ß√£o:
                
                Contexto do Projeto: {context}
                P√∫blico-alvo: {audience}
                Import√¢ncia da comunica√ß√£o: {stakes}
                
                Conte√∫do para an√°lise:
                ---
                {content_to_analyze}
                ---
                
                Sua an√°lise deve:
                1. Identificar ambiguidades, informa√ß√µes incompletas ou confusas
                2. Apontar poss√≠veis mal-entendidos baseados no p√∫blico-alvo
                3. Detectar problemas de tom ou linguagem inapropriada
                4. Identificar informa√ß√µes sens√≠veis ou potencialmente problem√°ticas
                5. Sugerir reformula√ß√µes espec√≠ficas para cada problema identificado
                6. Analisar a estrutura geral e propor melhorias organizacionais
                7. Verificar se h√° informa√ß√µes cr√≠ticas ausentes
                
                Organize sua an√°lise em forma de tabela com colunas para: Trecho problem√°tico, Risco potencial, Sugest√£o de melhoria.
                Ao final, forne√ßa uma avalia√ß√£o geral dos riscos de comunica√ß√£o (Baixo/M√©dio/Alto) e um resumo das principais recomenda√ß√µes.
                Forne√ßa tamb√©m uma vers√£o revisada completa do texto.
                """
                
            elif current_feature == "Consultor PMBOK 7":
                pmbok_topic = subtype  # J√° definido pelo selectbox de subtypes
                
                project_context = st.text_area("Contexto do Projeto", 
                                        help="Descreva brevemente o projeto ou a situa√ß√£o para contextualizar sua d√∫vida",
                                        height=100,
                                        placeholder="Ex: Estamos iniciando um projeto de desenvolvimento de software com metodologia h√≠brida...")
                
                specific_question = st.text_area("Sua D√∫vida Espec√≠fica", 
                                            help="Detalhe sua d√∫vida ou o que voc√™ precisa saber sobre o tema selecionado",
                                            height=150,
                                            placeholder="Ex: Como aplicar os princ√≠pios de valor do PMBOK 7 em um ambiente que tradicionalmente usava metodologias em cascata?")
                
                experience_level = st.select_slider("Seu N√≠vel de Experi√™ncia", 
                                                options=["Iniciante", "Intermedi√°rio", "Avan√ßado", "Especialista"],
                                                value="Intermedi√°rio")
                
                organization_context = st.text_input("Contexto Organizacional", 
                                                help="Descreva brevemente o contexto organizacional (opcional)",
                                                placeholder="Ex: Empresa de m√©dio porte do setor financeiro com cultura tradicional")
                
                base_prompt = f"""
                Forne√ßa uma orienta√ß√£o detalhada sobre o tema "{pmbok_topic}" do PMBOK 7 com base nas seguintes informa√ß√µes:
                
                Contexto do Projeto: {project_context}
                D√∫vida Espec√≠fica: {specific_question}
                N√≠vel de Experi√™ncia do Usu√°rio: {experience_level}
                Contexto Organizacional: {organization_context}
                
                Sua resposta deve:
                1. Explicar os conceitos relevantes do PMBOK 7 relacionados √† d√∫vida
                2. Fornecer orienta√ß√µes pr√°ticas adaptadas ao contexto espec√≠fico
                3. Apresentar exemplos concretos de aplica√ß√£o
                4. Destacar boas pr√°ticas e recomenda√ß√µes
                5. Considerar o n√≠vel de experi√™ncia do usu√°rio ({experience_level})
                6. Fazer conex√µes com outros dom√≠nios ou princ√≠pios relevantes do PMBOK 7
                7. Incluir dicas de implementa√ß√£o pr√°tica
                8. Mencionar poss√≠veis desafios e como super√°-los
                
                Formate a resposta de maneira estruturada, com se√ß√µes claras e, se apropriado, inclua refer√™ncias aos elementos espec√≠ficos do PMBOK 7.
                """
                
                # Enriquecemos o prompt com informa√ß√µes relevantes do PMBOK 7
                prompt = enrich_pmbok_prompt(base_prompt, pmbok_topic)
            
            submit_button = st.form_submit_button(f"Gerar {current_feature}")
        
        if submit_button:
            if not st.session_state.api_key_configured:
                st.error("API n√£o configurada. Por favor, contate o administrador.")
            elif st.session_state.token_count >= TOKEN_LIMIT:
                st.error(f"Voc√™ atingiu o limite de {TOKEN_LIMIT} tokens para esta sess√£o. Por favor, tente novamente mais tarde.")
            elif st.session_state.request_count >= REQUEST_LIMIT:
                st.error(f"Voc√™ atingiu o limite de {REQUEST_LIMIT} requisi√ß√µes para esta sess√£o. Por favor, tente novamente mais tarde.")
            else:
                # Gerar conte√∫do
                generated_content = generate_content(prompt, model="gpt-3.5-turbo", temperature=0.7)
                st.session_state.generated_content = generated_content
                
                # Exibir resultado
                st.markdown("### Resultado")
                st.markdown('<div class="result-area">', unsafe_allow_html=True)
                st.markdown(generated_content)
                st.markdown('</div>', unsafe_allow_html=True)
                
                # Op√ß√µes de download
                col1, col2 = st.columns(2)
                with col1:
                    # Download como texto
                    st.download_button(
                        label="üìÑ Baixar como TXT",
                        data=generated_content,
                        file_name=f"{current_feature.lower().replace(' ', '_')}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                        mime="text/plain"
                    )
                
                with col2:
                    # Download como DOCX
                    docx_buffer = export_as_docx(generated_content)
                    st.download_button(
                        label="üìù Baixar como DOCX",
                        data=docx_buffer,
                        file_name=f"{current_feature.lower().replace(' ', '_')}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.docx",
                        mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                    )
                
                # An√°lise de Tom (para todos os tipos de conte√∫do exceto PMBOK)
                if current_feature != "Consultor PMBOK 7":
                    create_tone_analysis_section(generated_content)
                
                # Feedback sobre o resultado
                st.markdown("### Este resultado foi √∫til?")
                col1, col2 = st.columns(2)
                with col1:
                    if st.button("üëç Sim, foi √∫til"):
                        st.markdown('<p class="feedback-good">Obrigado pelo feedback positivo!</p>', unsafe_allow_html=True)
                
                with col2:
                    if st.button("üëé N√£o, preciso de melhoria"):
                        st.markdown('<p class="feedback-bad">Lamentamos que n√£o tenha atendido suas expectativas. Por favor, forne√ßa detalhes no campo de feedback na barra lateral para podermos melhorar.</p>', unsafe_allow_html=True)

# ================= FOOTER =================

# Nota para o artigo
st.write("")
st.write("")
st.markdown("""
---
### Sobre esta demonstra√ß√£o do NEXUS

Este aplicativo √© uma vers√£o aprimorada do NEXUS, um assistente de IA para comunica√ß√£o e gerenciamento de projetos. Foi criado como parte do artigo "**Comunica√ß√£o eficiente em projetos: como a IA pode ajudar gerentes e equipes**".

#### Recursos do NEXUS:
- **Gerador de Comunica√ß√µes**: E-mails, relat√≥rios e comunicados adaptados ao seu contexto
- **Assistente de Reuni√µes**: Agendas, atas e follow-ups estruturados
- **Tradutor de Jarg√£o**: Simplifica√ß√£o de linguagem t√©cnica para diferentes p√∫blicos
- **Facilitador de Feedback**: Estrutura√ß√£o de feedback construtivo e equilibrado
- **Detector de Riscos**: An√°lise de comunica√ß√µes para evitar mal-entendidos
- **Consultor PMBOK 7**: Orienta√ß√µes sobre gerenciamento de projetos segundo o PMBOK 7
- **An√°lise de Tom**: Otimiza√ß√£o do impacto emocional de suas comunica√ß√µes

Para implementar o NEXUS em seu pr√≥prio ambiente:
1. Acesse o c√≥digo-fonte no GitHub: [github.com/seu-usuario/nexus-assistant](https://github.com/seu-usuario/nexus-assistant)
2. Siga as instru√ß√µes de instala√ß√£o no README
3. Configure com sua pr√≥pria chave API da OpenAI
4. Personalize para as necessidades espec√≠ficas da sua equipe

**Experimente as seis funcionalidades principais do NEXUS e veja como a IA pode transformar a comunica√ß√£o nos seus projetos!**
""")

# Rodap√© com cr√©ditos
st.markdown("""
<div style="text-align: center; color: gray; font-size: 0.8rem;">
    NEXUS | Assistente de Comunica√ß√£o e Gerenciamento de Projetos | ¬© 2025
</div>
""", unsafe_allow_html=True)


                      
