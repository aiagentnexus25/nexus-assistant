import streamlit as st
import requests
import json
import pandas as pd
from datetime import datetime
import plotly.express as px
import os
import re
import docx
from io import BytesIO
import time

# ================= CONFIGURA√á√ÉO INICIAL =================

st.set_page_config(
    page_title="NEXUS - Assistente de Comunica√ß√£o de Projetos",
    page_icon="üìã",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Paleta de cores
nexus_colors = {
    "purple": "#6247AA",
    "orange": "#FF6D2A",
    "teal": "#00C1D5",
    "dark_purple": "#231A41",
    "background": "#F5F5F7",
    "text_primary": "#1D1D1F",
    "text_secondary": "#86868B"
}

# CSS centralizado e minimalista
CUSTOM_CSS = f"""
<style>
  :root {{
    --purple: {nexus_colors['purple']};
    --orange: {nexus_colors['orange']};
    --teal: {nexus_colors['teal']};
    --dark-purple: {nexus_colors['dark_purple']};
    --background: {nexus_colors['background']};
    --text-primary: {nexus_colors['text_primary']};
    --text-secondary: {nexus_colors['text_secondary']};
  }}
  body {{
    font-family: 'SF Pro Text', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    background-color: var(--background);
    margin: 0;
    padding: 0;
  }}
  .header-gradient {{
    background: linear-gradient(90deg, var(--purple), var(--orange), var(--teal));
    padding: 1.5rem 2rem;
    border-radius: 10px;
    color: white;
    text-align: center;
    margin-bottom: 1.5rem;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
  }}
  .sidebar-content {{
    padding: 1rem;
    text-align: center;
  }}
  .feature-card {{
    background-color: white;
    border-left: 4px solid var(--purple);
    border-radius: 10px;
    padding: 1rem;
    margin-bottom: 1rem;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
  }}
  .feature-card:hover {{
    transform: translateY(-3px);
    box-shadow: 0 4px 10px rgba(0,0,0,0.15);
  }}
  .button-primary {{
    background-color: var(--purple);
    color: white;
    border: none;
    border-radius: 50px;
    padding: 0.5rem 1.5rem;
    cursor: pointer;
    transition: background-color 0.2s;
    width: 100%;
    text-align: center;
    margin-top: 0.5rem;
  }}
  .button-primary:hover {{
    background-color: #7955c9;
  }}
  .form-container {{
    background-color: white;
    border-radius: 10px;
    padding: 20px;
    margin-bottom: 20px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.05);
  }}
  .result-area {{
    background-color: white;
    border-radius: 10px;
    padding: 20px;
    margin-top: 20px;
    border: 1px solid #E2E8F0;
  }}
  @media (max-width: 768px) {{
    .feature-card {{
      margin-bottom: 1rem;
    }}
  }}
</style>
"""
st.markdown(CUSTOM_CSS, unsafe_allow_html=True)

# Base de conhecimento PMBOK 7
PMBOK7_KNOWLEDGE_BASE = {
    "princ√≠pios": [
        "Ser um administrador diligente, respeitoso e cuidadoso",
        "Criar um ambiente colaborativo da equipe do projeto",
        "Envolver efetivamente as partes interessadas",
        "Focar no valor",
        "Reconhecer, avaliar e responder √†s intera√ß√µes do sistema",
        "Demonstrar comportamentos de lideran√ßa",
        "Adaptar com base no contexto",
        "Incorporar qualidade nos processos e resultados",
        "Navegar na complexidade",
        "Otimizar respostas a riscos",
        "Abra√ßar adaptabilidade e resili√™ncia",
        "Permitir mudan√ßa para alcan√ßar o estado futuro previsto"
    ],
    "dom√≠nios": [
        "Stakeholders (Partes Interessadas)",
        "Team (Equipe)",
        "Development Approach and Life Cycle (Abordagem de Desenvolvimento e Ciclo de Vida)",
        "Planning (Planejamento)",
        "Project Work (Trabalho do Projeto)",
        "Delivery (Entrega)",
        "Measurement (Mensura√ß√£o)",
        "Uncertainty (Incerteza)"
    ],
    "metodologias": {
        "preditiva": "Abordagem tradicional (cascata) com fases sequenciais",
        "adaptativa": "Abordagens √°geis e iterativas (Scrum, Kanban, etc.)",
        "h√≠brida": "Combina√ß√£o de elementos preditivos e adaptativos"
    },
    "mudancas_principais": [
        "Transi√ß√£o de processos para princ√≠pios e dom√≠nios de performance",
        "Foco em entrega de valor em vez de apenas escopo, tempo e custo",
        "Maior √™nfase em adaptabilidade e contexto",
        "Abordagem de sistemas em vez de processos isolados",
        "Reconhecimento de m√∫ltiplas abordagens (adaptativa, preditiva, h√≠brida)",
        "Maior √™nfase na lideran√ßa e soft skills",
        "Vis√£o hol√≠stica do gerenciamento de projetos"
    ]
}

# Limites para intera√ß√µes
TOKEN_LIMIT = 100000
REQUEST_LIMIT = 50

# ================= INICIALIZA√á√ÉO DO SESSION STATE =================

if 'api_key_configured' not in st.session_state:
    st.session_state.api_key_configured = True
    if st.secrets.get("OPENAI_API_KEY"):
        st.session_state.api_key = st.secrets.get("OPENAI_API_KEY")
    else:
        st.session_state.api_key = None
        st.session_state.api_key_configured = False

if 'usage_data' not in st.session_state:
    st.session_state.usage_data = []
if 'generated_content' not in st.session_state:
    st.session_state.generated_content = ""
if 'history' not in st.session_state:
    st.session_state.history = []
if 'token_count' not in st.session_state:
    st.session_state.token_count = 0
if 'request_count' not in st.session_state:
    st.session_state.request_count = 0
if 'last_request_time' not in st.session_state:
    st.session_state.last_request_time = 0
if 'session_id' not in st.session_state:
    st.session_state.session_id = datetime.now().strftime("%Y%m%d%H%M%S") + str(hash(datetime.now()))[:5]
if 'current_feature' not in st.session_state:
    st.session_state.current_feature = ""
if 'previous_screen' not in st.session_state:
    st.session_state.previous_screen = None

# Funcionalidades dispon√≠veis
feature_options = {
    "Gerador de Comunica√ß√µes Estruturadas": {
        "description": "Crie e-mails, relat√≥rios e comunicados formais a partir de pontos-chave.",
        "icon": "üìß",
        "color": "purple",
        "subtypes": ["E-mail Profissional", "Relat√≥rio de Status", "Comunicado Formal"]
    },
    "Assistente de Reuni√µes": {
        "description": "Gere agendas, atas e mensagens de follow-up para reuni√µes.",
        "icon": "üìÖ",
        "color": "orange",
        "subtypes": ["Agenda de Reuni√£o", "Ata/Resumo de Reuni√£o", "Follow-up de Reuni√£o"]
    },
    "Tradutor de Jarg√£o T√©cnico": {
        "description": "Simplifique conte√∫do t√©cnico para diferentes p√∫blicos.",
        "icon": "üîÑ",
        "color": "teal",
        "subtypes": ["Simplifica√ß√£o de Documento T√©cnico", "Adapta√ß√£o para Executivos", "Adapta√ß√£o para Clientes", "Adapta√ß√£o para Equipe T√©cnica"]
    },
    "Facilitador de Feedback": {
        "description": "Estruture feedback construtivo e prepare roteiros para conversas dif√≠ceis.",
        "icon": "üí¨",
        "color": "purple",
        "subtypes": ["Feedback de Desempenho", "Feedback sobre Entreg√°veis", "Roteiro para Conversa Dif√≠cil"]
    },
    "Detector de Riscos de Comunica√ß√£o": {
        "description": "Analise comunica√ß√µes para identificar ambiguidades e problemas potenciais.",
        "icon": "üîç",
        "color": "orange",
        "subtypes": ["An√°lise de E-mail", "An√°lise de Comunicado", "An√°lise de Proposta", "An√°lise de Documento de Requisitos"]
    },
    "Consultor PMBOK 7": {
        "description": "Oriente sobre gerenciamento de projetos conforme o PMBOK 7.",
        "icon": "üìö",
        "color": "teal",
        "subtypes": ["Princ√≠pios de Gerenciamento", "Dom√≠nios de Performance", "Adapta√ß√£o de Metodologias", "Ferramentas e T√©cnicas", "Melhores Pr√°ticas"]
    }
}

# ================= FUN√á√ïES AUXILIARES =================

def header():
    """Renderiza o cabe√ßalho com gradiente."""
    st.markdown('<div class="header-gradient"><h1>NEXUS</h1></div>', unsafe_allow_html=True)

def sidebar():
    """Configura a barra lateral com logo e descri√ß√£o."""
    with st.sidebar:
        st.markdown("""
        <div class="sidebar-content">
            <h3>NEXUS</h3>
            <p>Assistente de Comunica√ß√£o IA</p>
        </div>
        """, unsafe_allow_html=True)

def export_as_docx(content, filename="documento"):
    """Exporta o conte√∫do como DOCX."""
    doc = docx.Document()
    doc.add_heading(filename, 0)
    for line in content.split("\n"):
        if line.strip() == "":
            continue
        if re.match(r'^#{1,6}\s+', line):
            header_match = re.match(r'^(#{1,6})\s+(.*)', line)
            if header_match:
                level = min(len(header_match.group(1)), 9)
                text = header_match.group(2)
                doc.add_heading(text, level)
        else:
            doc.add_paragraph(line)
    buffer = BytesIO()
    doc.save(buffer)
    buffer.seek(0)
    return buffer

def enrich_pmbok_prompt(prompt, pmbok_topic):
    """Enriquece o prompt com informa√ß√µes do PMBOK 7."""
    additional_info = ""
    if "Princ√≠pios" in pmbok_topic:
        additional_info += "\n\nPrinc√≠pios de Gerenciamento do PMBOK 7:\n" + "\n".join(PMBOK7_KNOWLEDGE_BASE["princ√≠pios"])
    elif "Dom√≠nios" in pmbok_topic:
        additional_info += "\n\nDom√≠nios de Performance do PMBOK 7:\n" + "\n".join(PMBOK7_KNOWLEDGE_BASE["dom√≠nios"])
    elif "Adapta√ß√£o" in pmbok_topic:
        additional_info += "\n\nAbordagens de Desenvolvimento no PMBOK 7:\n"
        for k, v in PMBOK7_KNOWLEDGE_BASE["metodologias"].items():
            additional_info += f"- {k.capitalize()}: {v}\n"
    elif "Melhores Pr√°ticas" in pmbok_topic:
        additional_info += "\n\nMudan√ßas Principais no PMBOK 7:\n" + "\n".join([f"- {item}" for item in PMBOK7_KNOWLEDGE_BASE["mudancas_principais"]])
    return prompt + additional_info

def generate_content(prompt, model="gpt-3.5-turbo", temperature=0.7):
    """Gera conte√∫do via API OpenAI."""
    if not st.session_state.api_key_configured or not st.session_state.api_key:
        return "API n√£o configurada. Por favor, contate o administrador."
    if st.session_state.token_count >= TOKEN_LIMIT:
        return f"Voc√™ atingiu o limite de {TOKEN_LIMIT} tokens para esta sess√£o. Por favor, tente novamente mais tarde."
    if st.session_state.request_count >= REQUEST_LIMIT:
        return f"Voc√™ atingiu o limite de {REQUEST_LIMIT} requisi√ß√µes para esta sess√£o. Por favor, tente novamente mais tarde."
    try:
        with st.spinner("Gerando conte√∫do..."):
            st.session_state.last_request_time = time.time()
            st.session_state.request_count += 1
            headers = {
                "Content-Type": "application/json",
                "Authorization": f"Bearer {st.session_state.api_key}"
            }
            system_prompt = """
            Voc√™ √© o NEXUS, um assistente de IA especializado em comunica√ß√£o estrat√©gica e gerenciamento de projetos.
            Forne√ßa respostas profissionais, estruturadas e detalhadas.
            """
            payload = {
                "model": model,
                "messages": [
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": prompt}
                ],
                "temperature": temperature,
                "max_tokens": 4000
            }
            response = requests.post("https://api.openai.com/v1/chat/completions",
                                     headers=headers,
                                     data=json.dumps(payload),
                                     timeout=60)
            if response.status_code == 200:
                result = response.json()
                content = result['choices'][0]['message']['content']
                total_tokens = result['usage']['total_tokens']
                st.session_state.token_count += total_tokens
                st.session_state.usage_data.append({
                    'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                    'feature': st.session_state.current_feature,
                    'tokens': total_tokens,
                    'model': model,
                    'session_id': st.session_state.session_id
                })
                st.session_state.history.append({
                    'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                    'feature': st.session_state.current_feature,
                    'input': prompt[:100] + "..." if len(prompt) > 100 else prompt,
                    'output': content,
                    'model': model,
                    'session_id': st.session_state.session_id
                })
                return content
            else:
                return f"Erro na API (Status {response.status_code}): {response.text}"
    except Exception as e:
        return f"Erro ao gerar conte√∫do: {str(e)}"

def feature_cards():
    """Exibe os cart√µes de sele√ß√£o de funcionalidades."""
    st.markdown("## Selecione uma Funcionalidade")
    cols = st.columns(2)
    features_list = list(feature_options.items())
    for i, (name, details) in enumerate(features_list):
        current_col = cols[i % 2]
        with current_col:
            st.markdown(f"""
            <div class="feature-card">
                <h3 style="color: var(--dark-purple);">{details['icon']} {name}</h3>
                <p style="color: var(--text-secondary);">{details['description']}</p>
            </div>
            """, unsafe_allow_html=True)
            if st.button("Selecionar", key=f"select_{name}"):
                st.session_state.current_feature = name
                st.session_state.previous_screen = "home"
                st.experimental_rerun()

# ================= INTERFACE PRINCIPAL =================

def main():
    header()
    sidebar()
    
    with st.expander("‚ÑπÔ∏è Sobre esta vers√£o", expanded=False):
        st.markdown(f"""
        **Vers√£o NEXUS Aprimorada**
        - At√© {REQUEST_LIMIT} requisi√ß√µes por sess√£o
        - At√© {TOKEN_LIMIT} tokens por sess√£o
        - Design responsivo e minimalista
        - An√°lise avan√ßada de tom comunicacional
        """)
    
    # Bot√£o VOLTAR se uma funcionalidade estiver selecionada
    if st.session_state.current_feature:
        if st.button("‚óÄÔ∏è VOLTAR", key="back_to_home"):
            st.session_state.current_feature = ""
            st.session_state.generated_content = ""
            st.experimental_rerun()
    
    # Hist√≥rico de gera√ß√µes recentes
    if st.session_state.history:
        with st.expander("Hist√≥rico de Gera√ß√µes Recentes", expanded=False):
            for i, item in enumerate(reversed(st.session_state.history[-5:])):
                st.markdown(f"""
                <div style="padding: 10px; border: 1px solid #E2E8F0; border-radius: 8px; margin-bottom: 10px;">
                    <strong>{item['timestamp']} - {item['feature']}</strong>
                </div>
                """, unsafe_allow_html=True)
                if st.button("Carregar este conte√∫do ‚Ü©Ô∏è", key=f"load_{i}"):
                    st.session_state.current_feature = item['feature']
                    st.session_state.generated_content = item['output']
                    st.experimental_rerun()
    
    # Exibe os cart√µes ou a interface da funcionalidade
    if not st.session_state.current_feature:
        feature_cards()
    else:
        current_feature = st.session_state.current_feature
        details = feature_options[current_feature]
        st.markdown(f"## {details['icon']} {current_feature}")
        
        if st.session_state.token_count >= TOKEN_LIMIT:
            st.error(f"Voc√™ atingiu o limite de {TOKEN_LIMIT} tokens para esta sess√£o.")
        elif st.session_state.request_count >= REQUEST_LIMIT:
            st.error(f"Voc√™ atingiu o limite de {REQUEST_LIMIT} requisi√ß√µes para esta sess√£o.")
        else:
            with st.form(key=f"{current_feature}_form"):
                st.markdown('<div class="form-container">', unsafe_allow_html=True)
                st.markdown(f"<p style='font-size:1.5rem; color: var(--dark-purple);'>{details['description']}</p>", unsafe_allow_html=True)
                
                subtype = st.selectbox("Tipo de Comunica√ß√£o", details['subtypes'])
                context = ""
                prompt = ""
                
                if current_feature != "Consultor PMBOK 7":
                    context = st.text_area("Contexto do Projeto", help="Descreva o projeto, fase atual e informa√ß√µes relevantes", height=100, placeholder="Ex: Projeto de desenvolvimento de aplicativo m√≥vel, fase de testes")
                
                # Montagem do prompt com base na funcionalidade selecionada
                if current_feature == "Gerador de Comunica√ß√µes Estruturadas":
                    audience = st.text_input("P√∫blico-alvo", help="Para quem ser√° enviada a comunica√ß√£o", placeholder="Ex: Cliente, equipe, stakeholder")
                    key_points = st.text_area("Pontos-chave", help="Liste os principais pontos da comunica√ß√£o", height=150, placeholder="Ex: Atraso de 3 dias; plano de recupera√ß√£o")
                    tone = st.select_slider("Tom da Comunica√ß√£o", options=["Muito Formal", "Formal", "Neutro", "Amig√°vel", "Casual"], value="Neutro")
                    prompt = f"""
                    Gere um {subtype} com base nas seguintes informa√ß√µes:
                    
                    Contexto do Projeto: {context}
                    P√∫blico-alvo: {audience}
                    Pontos-chave: {key_points}
                    Tom desejado: {tone}
                    
                    Formate a sa√≠da adequadamente para um {subtype}.
                    """
                elif current_feature == "Assistente de Reuni√µes":
                    participants = st.text_area("Participantes", help="Liste os participantes e suas fun√ß√µes", height=100, placeholder="Ex: Jo√£o Silva (Gerente), Maria Costa (Desenvolvedora)")
                    topics = st.text_area("T√≥picos a serem abordados", help="Liste os t√≥picos da reuni√£o", height=150, placeholder="Ex: Atualiza√ß√£o do cronograma, bugs, feedback do cliente")
                    duration = st.number_input("Dura√ß√£o (minutos)", min_value=15, max_value=240, value=60, step=15)
                    if subtype == "Agenda de Reuni√£o":
                        prompt = f"""
                        Crie uma agenda para uma reuni√£o de {duration} minutos com base nas informa√ß√µes:
                        
                        Contexto do Projeto: {context}
                        Participantes: {participants}
                        T√≥picos: {topics}
                        """
                    elif subtype == "Ata/Resumo de Reuni√£o":
                        decisions = st.text_area("Decis√µes tomadas", help="Liste as decis√µes da reuni√£o", height=100, placeholder="Ex: Aprova√ß√£o do novo design")
                        actions = st.text_area("A√ß√µes acordadas", help="Liste as a√ß√µes acordadas, respons√°veis e prazos", height=100, placeholder="Ex: Jo√£o: corre√ß√£o de bug at√© amanh√£")
                        prompt = f"""
                        Crie uma ata/resumo para uma reuni√£o de {duration} minutos com base nas informa√ß√µes:
                        
                        Contexto do Projeto: {context}
                        Participantes: {participants}
                        T√≥picos: {topics}
                        Decis√µes: {decisions}
                        A√ß√µes: {actions}
                        """
                    else:  # Follow-up
                        meeting_outcome = st.text_area("Resultado da reuni√£o", help="Resuma os resultados da reuni√£o", height=100, placeholder="Ex: Defini√ß√£o de prioridades para o pr√≥ximo sprint")
                        action_items = st.text_area("Itens de a√ß√£o", help="Liste os itens de a√ß√£o", height=100, placeholder="Ex: Jo√£o: revis√£o de c√≥digo; Maria: implementa√ß√£o da nova feature")
                        prompt = f"""
                        Crie uma mensagem de follow-up para uma reuni√£o com base nas informa√ß√µes:
                        
                        Contexto do Projeto: {context}
                        Participantes: {participants}
                        T√≥picos: {topics}
                        Resultado: {meeting_outcome}
                        Itens de a√ß√£o: {action_items}
                        """
                elif current_feature == "Tradutor de Jarg√£o T√©cnico":
                    technical_content = st.text_area("Conte√∫do T√©cnico", help="Cole o texto t√©cnico a ser adaptado", height=200, placeholder="Ex: Implementa√ß√£o do Redux com reducers imut√°veis...")
                    audience = st.selectbox("P√∫blico-alvo", ["Executivos", "Clientes n√£o-t√©cnicos", "Equipe de Neg√≥cios", "Equipe T√©cnica Junior"])
                    key_concepts = st.text_input("Conceitos-chave", help="Liste os conceitos que devem ser mantidos", placeholder="Ex: gerenciamento de estado, API")
                    prompt = f"""
                    Adapte o seguinte conte√∫do t√©cnico para um p√∫blico de {audience}:
                    
                    Contexto do Projeto: {context}
                    Conte√∫do Original: {technical_content}
                    Conceitos-chave: {key_concepts}
                    """
                elif current_feature == "Facilitador de Feedback":
                    situation = st.text_area("Situa√ß√£o", help="Descreva a situa√ß√£o para o feedback", height=150, placeholder="Ex: Atraso na entrega")
                    strengths = st.text_area("Pontos Fortes", help="Liste os pontos positivos", height=100, placeholder="Ex: Qualidade do c√≥digo")
                    areas = st.text_area("√Åreas para Melhoria", help="Liste os pontos a melhorar", height=100, placeholder="Ex: Falta de comunica√ß√£o")
                    relationship = st.selectbox("Rela√ß√£o com o Receptor", ["Membro da equipe", "Colega", "Superior", "Cliente", "Fornecedor"])
                    prompt = f"""
                    Estruture um {subtype} de feedback com base nas informa√ß√µes:
                    
                    Contexto do Projeto: {context}
                    Situa√ß√£o: {situation}
                    Pontos Fortes: {strengths}
                    √Åreas para Melhoria: {areas}
                    Rela√ß√£o: {relationship}
                    """
                elif current_feature == "Detector de Riscos de Comunica√ß√£o":
                    content_to_analyze = st.text_area("Conte√∫do para An√°lise", help="Cole o conte√∫do a ser analisado", height=200, placeholder="Ex: Comunica√ß√£o com poss√≠veis ambiguidades...")
                    audience = st.text_input("P√∫blico-alvo", help="Quem receber√° a comunica√ß√£o", placeholder="Ex: Cliente executivo")
                    stakes = st.select_slider("Import√¢ncia", options=["Baixa", "M√©dia", "Alta", "Cr√≠tica"], value="M√©dia")
                    prompt = f"""
                    Analise o seguinte {subtype} quanto a riscos de comunica√ß√£o:
                    
                    Contexto do Projeto: {context}
                    P√∫blico-alvo: {audience}
                    Import√¢ncia: {stakes}
                    
                    Conte√∫do:
                    {content_to_analyze}
                    """
                elif current_feature == "Consultor PMBOK 7":
                    pmbok_topic = subtype
                    project_context = st.text_area("Contexto do Projeto", help="Descreva o contexto do projeto", height=100, placeholder="Ex: Projeto de software com metodologia h√≠brida")
                    specific_question = st.text_area("Sua D√∫vida", help="Detalhe sua d√∫vida sobre o PMBOK 7", height=150, placeholder="Ex: Como aplicar os princ√≠pios de valor do PMBOK 7?")
                    experience_level = st.select_slider("N√≠vel de Experi√™ncia", options=["Iniciante", "Intermedi√°rio", "Avan√ßado", "Especialista"], value="Intermedi√°rio")
                    organization_context = st.text_input("Contexto Organizacional", help="Descreva o contexto organizacional (opcional)", placeholder="Ex: Empresa de m√©dio porte")
                    base_prompt = f"""
                    Forne√ßa uma orienta√ß√£o detalhada sobre "{pmbok_topic}" do PMBOK 7 com base nas informa√ß√µes:
                    
                    Contexto do Projeto: {project_context}
                    D√∫vida: {specific_question}
                    N√≠vel de Experi√™ncia: {experience_level}
                    Contexto Organizacional: {organization_context}
                    """
                    prompt = enrich_pmbok_prompt(base_prompt, pmbok_topic)
                
                st.markdown('</div>', unsafe_allow_html=True)
                submit_button = st.form_submit_button("GERAR", type="primary")
            
            if submit_button:
                if not st.session_state.api_key_configured:
                    st.error("API n√£o configurada. Por favor, contate o administrador.")
                elif st.session_state.token_count >= TOKEN_LIMIT:
                    st.error(f"Limite de {TOKEN_LIMIT} tokens atingido.")
                elif st.session_state.request_count >= REQUEST_LIMIT:
                    st.error(f"Limite de {REQUEST_LIMIT} requisi√ß√µes atingido.")
                else:
                    generated = generate_content(prompt)
                    st.session_state.generated_content = generated
                    st.markdown("### Resultado")
                    st.markdown(f'<div class="result-area">{generated}</div>', unsafe_allow_html=True)
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        st.download_button(
                            label="üìÑ Baixar como TXT",
                            data=generated,
                            file_name=f"{current_feature.lower().replace(' ', '_')}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                            mime="text/plain"
                        )
                    with col2:
                        docx_buffer = export_as_docx(generated)
                        st.download_button(
                            label="üìù Baixar como DOCX",
                            data=docx_buffer,
                            file_name=f"{current_feature.lower().replace(' ', '_')}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.docx",
                            mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                        )
                    if st.button("‚óÄÔ∏è VOLTAR", key="back_from_result"):
                        st.session_state.generated_content = ""
                        st.experimental_rerun()

if __name__ == "__main__":
    main()
