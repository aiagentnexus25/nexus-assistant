import streamlit as st
import requests
import json
import pandas as pd
from datetime import datetime, timedelta
import plotly.express as px
import os
import re
import docx
from io import BytesIO
import time
import hashlib

# ================= CONFIGURATION =================

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="NEXUS - Assistente de Comunica√ß√£o de Projetos",
    page_icon="üìã",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS Personalizado
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #1E3A8A;
        text-align: center;
        margin-bottom: 1rem;
    }
    .sub-header {
        font-size: 1.2rem;
        color: #3B82F6;
        text-align: center;
        margin-bottom: 2rem;
    }
    .feature-card {
        background-color: #F3F4F6;
        border-radius: 10px;
        padding: 20px;
        margin-bottom: 20px;
        border-left: 5px solid #3B82F6;
    }
    .result-area {
        background-color: #F0F9FF;
        border-radius: 10px;
        padding: 20px;
        margin: 20px 0;
        border: 1px solid #BAE6FD;
    }
    .sidebar-content {
        padding: 20px 10px;
    }
    .metric-card {
        background-color: #FAFAFA;
        border-radius: 8px;
        padding: 15px;
        margin: 10px 0;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    .feedback-good {
        color: #059669;
        font-weight: bold;
    }
    .feedback-bad {
        color: #DC2626;
        font-weight: bold;
    }
    .stAlert {
        margin-top: 1rem;
        margin-bottom: 1rem;
    }
    .usage-info {
        background-color: #EFF6FF;
        border-radius: 8px;
        padding: 10px;
        margin: 10px 0;
        border: 1px solid #DBEAFE;
    }
    .export-options {
        background-color: #F8F9FA;
        border-radius: 10px;
        padding: 15px;
        margin: 10px 0;
        border: 1px solid #E9ECEF;
    }
    .template-card {
        background-color: #F0FDF4;
        border-radius: 8px;
        padding: 12px;
        margin: 8px 0;
        border: 1px solid #DCFCE7;
    }
    .model-selector {
        background-color: #F5F3FF;
        border-radius: 8px;
        padding: 12px;
        margin: 10px 0;
        border: 1px solid #EDE9FE;
    }
    .history-item {
        background-color: #FAFAFA;
        border-radius: 8px;
        padding: 10px;
        margin: 8px 0;
        border-left: 3px solid #3B82F6;
    }
</style>
""", unsafe_allow_html=True)

# ================= CONSTANTS =================

# Limites de uso restritivos para testes
TOKEN_LIMIT = 3000      # Limite total de tokens por sess√£o
REQUEST_LIMIT = 5       # Limite de solicita√ß√µes por sess√£o
RATE_LIMIT_SECONDS = 60 # Tempo m√≠nimo (em segundos) entre requisi√ß√µes

# System prompt base para o assistente
system_prompt = """
Voc√™ √© o NEXUS, um assistente especializado em comunica√ß√£o de projetos. Seu objetivo √© ajudar gerentes de projetos, l√≠deres de equipe e outros profissionais a comunicar-se de forma clara, eficaz e profissional em diversos contextos de projetos.

Voc√™ possui cinco habilidades principais:

1. Gerador de Comunica√ß√µes Estruturadas: Criar e-mails profissionais, relat√≥rios de status e comunicados formais.
2. Assistente de Reuni√µes: Gerar agendas detalhadas, atas e resumos de reuni√µes, e estruturar follow-ups.
3. Tradutor de Jarg√£o T√©cnico: Simplificar linguagem t√©cnica, adaptar comunica√ß√µes para diferentes p√∫blicos e traduzir requisitos t√©cnicos.
4. Facilitador de Feedback: Estruturar feedback construtivo, transformar cr√≠ticas em sugest√µes e criar roteiros para conversas dif√≠ceis.
5. Detector de Riscos de Comunica√ß√£o: Analisar comunica√ß√µes, sugerir alternativas mais claras e avaliar adequa√ß√£o ao p√∫blico.

Ao responder, voc√™ deve:
- Ser conciso mas completo
- Usar linguagem profissional e tom adequado para o contexto
- Estruturar o conte√∫do de forma l√≥gica e clara
- Focar em comunica√ß√£o eficaz e construtiva
- Evitar jarg√µes desnecess√°rios, a menos que sejam apropriados para o p√∫blico-alvo

Observa√ß√£o importante: Esta √© uma vers√£o de demonstra√ß√£o com limites de uso. Seja eficiente e direto em suas respostas.
"""

# Defini√ß√£o de funcionalidades dispon√≠veis
feature_options = {
    "Gerador de Comunica√ß√µes Estruturadas": {
        "description": "Crie e-mails profissionais, relat√≥rios de status e comunicados formais a partir de pontos-chave.",
        "icon": "üìß",
        "subtypes": ["E-mail Profissional", "Relat√≥rio de Status", "Comunicado Formal"]
    },
    "Assistente de Reuni√µes": {
        "description": "Gere agendas detalhadas, atas de reuni√µes e mensagens de follow-up estruturadas.",
        "icon": "üìÖ",
        "subtypes": ["Agenda de Reuni√£o", "Ata/Resumo de Reuni√£o", "Follow-up de Reuni√£o"]
    },
    "Tradutor de Jarg√£o T√©cnico": {
        "description": "Simplifique linguagem t√©cnica e adapte comunica√ß√µes para diferentes p√∫blicos.",
        "icon": "üîÑ",
        "subtypes": ["Simplifica√ß√£o de Documento T√©cnico", "Adapta√ß√£o para Executivos", "Adapta√ß√£o para Clientes", "Adapta√ß√£o para Equipe T√©cnica"]
    },
    "Facilitador de Feedback": {
        "description": "Estruture feedback construtivo e prepare roteiros para conversas dif√≠ceis.",
        "icon": "üí¨",
        "subtypes": ["Feedback de Desempenho", "Feedback sobre Entreg√°veis", "Roteiro para Conversa Dif√≠cil"]
    },
    "Detector de Riscos de Comunica√ß√£o": {
        "description": "Analise comunica√ß√µes para identificar ambiguidades e problemas potenciais.",
        "icon": "üîç",
        "subtypes": ["An√°lise de E-mail", "An√°lise de Comunicado", "An√°lise de Proposta", "An√°lise de Documento de Requisitos"]
    }
}

# ================= SISTEMA DE CACHE PARA API OPENAI =================

class OpenAICache:
    def __init__(self, cache_dir="cache", ttl_hours=24):
        """
        Inicializa o sistema de cache
        
        Args:
            cache_dir (str): Diret√≥rio para armazenar os arquivos de cache
            ttl_hours (int): Tempo de vida do cache em horas
        """
        self.cache_dir = cache_dir
        self.ttl_hours = ttl_hours
        
        # Criar diret√≥rio de cache se n√£o existir
        if not os.path.exists(cache_dir):
            os.makedirs(cache_dir)
    
    def get_cache_key(self, prompt, model, temperature):
        """
        Gera uma chave √∫nica para o cache baseado nos par√¢metros da solicita√ß√£o
        
        Args:
            prompt (str): O prompt enviado para a API
            model (str): O modelo usado (ex: gpt-3.5-turbo)
            temperature (float): A temperatura usada para gera√ß√£o
            
        Returns:
            str: Chave hash √∫nica para o cache
        """
        # Criar string com todos os par√¢metros relevantes
        cache_str = f"{prompt}|{model}|{temperature}"
        
        # Gerar hash MD5 para usar como nome de arquivo
        return hashlib.md5(cache_str.encode()).hexdigest()
    
    def get_from_cache(self, prompt, model, temperature):
        """
        Tenta recuperar uma resposta do cache
        
        Args:
            prompt (str): O prompt enviado para a API
            model (str): O modelo usado (ex: gpt-3.5-turbo)
            temperature (float): A temperatura usada para gera√ß√£o
            
        Returns:
            dict or None: Dados do cache se dispon√≠vel e v√°lido, ou None
        """
        cache_key = self.get_cache_key(prompt, model, temperature)
        cache_file = os.path.join(self.cache_dir, f"{cache_key}.json")
        
        # Verificar se arquivo de cache existe
        if not os.path.exists(cache_file):
            return None

# ================= SIDEBAR =================

# Sidebar para configura√ß√£o
def render_sidebar():
    with st.sidebar:
        st.markdown('<div class="sidebar-content">', unsafe_allow_html=True)
        st.image("https://via.placeholder.com/150x150.png?text=NEXUS", width=150)
        
        # Mostrar status da API
        st.markdown("### Status")
        if st.session_state.api_key_configured:
            st.success("‚úÖ API configurada automaticamente")
        else:
            st.error("‚ùå API n√£o configurada. Contate o administrador.")
        
        # Seletor de modelo
        st.markdown("### Configura√ß√µes")
        model_selector()
        
        # Exibir estat√≠sticas de uso
        st.markdown("### Seu Uso")
        
        col1, col2 = st.columns(2)
        with col1:
            st.markdown('<div class="metric-card">', unsafe_allow_html=True)
            st.metric("Requisi√ß√µes", f"{st.session_state.request_count}/{REQUEST_LIMIT}")
            st.markdown('</div>', unsafe_allow_html=True)
        
        with col2:
            st.markdown('<div class="metric-card">', unsafe_allow_html=True)
            st.metric("Tokens", f"{st.session_state.token_count}/{TOKEN_LIMIT}")
            st.markdown('</div>', unsafe_allow_html=True)
        
        # Barras de progresso
        st.progress(st.session_state.request_count / REQUEST_LIMIT)
        st.caption("Uso de requisi√ß√µes")
        
        st.progress(st.session_state.token_count / TOKEN_LIMIT)
        st.caption("Uso de tokens")
        
        # Informa√ß√µes sobre cache
        if st.session_state.usage_data:
            cache_hits = sum(1 for item in st.session_state.usage_data if 'from_cache' in item and item['from_cache'])
            total_requests = len(st.session_state.usage_data)
            
            if total_requests > 0:
                cache_hit_rate = (cache_hits / total_requests) * 100
                st.markdown('<div class="usage-info">', unsafe_allow_html=True)
                st.caption(f"Taxa de cache: {cache_hit_rate:.1f}%")
                if cache_hits > 0:
                    tokens_saved = sum(item['tokens'] for item in st.session_state.usage_data if 'from_cache' in item and item['from_cache'])
                    st.caption(f"Tokens economizados: {tokens_saved}")
                st.markdown('</div>', unsafe_allow_html=True)
        
        # Informa√ß√µes de sess√£o (apenas para rastreamento)
        st.markdown('<div class="usage-info">', unsafe_allow_html=True)
        st.caption(f"ID da sess√£o: {st.session_state.session_id}")
        st.caption(f"In√≠cio: {datetime.fromtimestamp(st.session_state.last_request_time).strftime('%H:%M:%S') if st.session_state.last_request_time > 0 else 'N/A'}")
        st.markdown('</div>', unsafe_allow_html=True)
        
        # Feedback
        st.markdown("### Feedback")
        feedback = st.radio("Como est√° sua experi√™ncia?", ["üòÄ Excelente", "üôÇ Boa", "üòê Neutra", "üôÅ Ruim", "üòû P√©ssima"])
        feedback_text = st.text_area("Coment√°rios adicionais")
        
        if st.button("Enviar Feedback"):
            st.success("Feedback enviado. Obrigado por nos ajudar a melhorar!")
        
        st.markdown("</div>", unsafe_allow_html=True)
        
        # Informa√ß√£o sobre limites de uso
        st.markdown("---")
        st.caption("Esta √© uma vers√£o de demonstra√ß√£o com limites de uso para controlar custos. Para uso sem limites, implemente o NEXUS em seu pr√≥prio ambiente.")

# ================= MAIN INTERFACE =================

def main():
    # Renderizar a barra lateral
    render_sidebar()
    
    # Interface principal
    st.markdown('<h1 class="main-header">NEXUS</h1>', unsafe_allow_html=True)
    st.markdown('<p class="sub-header">Comunica√ß√£o de projetos clara, eficaz e profissional</p>', unsafe_allow_html=True)
    
    # Mensagem sobre vers√£o de teste
    st.info(f"""
    **Vers√£o de Demonstra√ß√£o**
    Esta √© uma vers√£o de demonstra√ß√£o do NEXUS com limites de uso:
    - M√°ximo de {REQUEST_LIMIT} requisi√ß√µes por sess√£o
    - M√°ximo de {TOKEN_LIMIT} tokens por sess√£o
    - Tempo m√≠nimo de {RATE_LIMIT_SECONDS} segundos entre requisi√ß√µes
    """)
    
    # Hist√≥rico de gera√ß√µes recentes
    render_history_panel()
    
    # Sele√ß√£o de funcionalidade
    # Organizar op√ß√µes em colunas
    col1, col2 = st.columns(2)
    
    count = 0
    for feature, details in feature_options.items():
        if count % 2 == 0:
            with col1:
                with st.expander(f"{details['icon']} {feature}", expanded=False):
                    st.markdown(f"**{details['description']}**")
                    if st.button(f"Usar {feature}", key=f"select_{feature}"):
                        st.session_state.current_feature = feature
                        st.experimental_rerun()
        else:
            with col2:
                with st.expander(f"{details['icon']} {feature}", expanded=False):
                    st.markdown(f"**{details['description']}**")
                    if st.button(f"Usar {feature}", key=f"select_{feature}"):
                        st.session_state.current_feature = feature
                        st.experimental_rerun()
        count += 1
    
    # ================= FEATURE INTERFACE =================
    
    # Se uma funcionalidade foi selecionada na sess√£o atual ou anteriormente
    if st.session_state.current_feature:
        current_feature = st.session_state.current_feature
        feature_details = feature_options[current_feature]
        
        st.markdown(f"## {feature_details['icon']} {current_feature}")
        
        # Verificar limites antes de mostrar a interface
        if st.session_state.token_count >= TOKEN_LIMIT:
            st.error(f"Voc√™ atingiu o limite de {TOKEN_LIMIT} tokens para esta sess√£o. Por favor, tente novamente mais tarde.")
        elif st.session_state.request_count >= REQUEST_LIMIT:
            st.error(f"Voc√™ atingiu o limite de {REQUEST_LIMIT} requisi√ß√µes para esta sess√£o. Por favor, tente novamente mais tarde.")
        elif time.time() - st.session_state.last_request_time < RATE_LIMIT_SECONDS and st.session_state.request_count > 0:
            wait_time = round(RATE_LIMIT_SECONDS - (time.time() - st.session_state.last_request_time))
            st.warning(f"Por favor, aguarde {wait_time} segundos antes de fazer outra requisi√ß√£o.")
        else:
            # Verificar templates dispon√≠veis
            selected_template = template_selector(current_feature)
            template_data = None
            
            if selected_template:
                template_data = selected_template['template']
            
            # Interface espec√≠fica da funcionalidade
            with st.form(key=f"{current_feature}_form"):
                st.markdown(f"**{feature_details['description']}**")
                
                # Campo de subtipo
                subtype = st.selectbox("Tipo de Comunica√ß√£o", feature_details['subtypes'])
                
                # Campos comuns a todas as funcionalidades
                context = st.text_area("Contexto do Projeto", 
                                    help="Descreva o projeto, fase atual e informa√ß√µes relevantes",
                                    height=100,
                                    placeholder="Ex: Projeto de desenvolvimento do aplicativo mobile, fase de testes",
                                    value=template_data.get('context', "") if template_data else "")
                
                # Campos espec√≠ficos por funcionalidade
                prompt = ""
                
                if current_feature == "Gerador de Comunica√ß√µes Estruturadas":
                    audience = st.text_input("P√∫blico-alvo", 
                                        help="Para quem esta comunica√ß√£o ser√° enviada (equipe, cliente, stakeholder)",
                                        placeholder="Ex: Cliente, diretor de marketing da empresa XYZ",
                                        value=template_data.get('audience', "") if template_data else "")
                    key_points = st.text_area("Pontos-chave", 
                                            help="Liste os principais pontos que devem ser inclu√≠dos na comunica√ß√£o",
                                            height=150,
                                            placeholder="Ex: Atraso de 3 dias devido a bugs na integra√ß√£o; Plano de recupera√ß√£o com recursos adicionais",
                                            value=template_data.get('key_points', "") if template_data else "")
                    tone = st.select_slider("Tom da Comunica√ß√£o", 
                                        options=["Muito Formal", "Formal", "Neutro", "Amig√°vel", "Casual"],
                                        value=template_data.get('tone', "Neutro") if template_data else "Neutro")
                    
                    prompt = f"""
                    Gere um {subtype} com base nas seguintes informa√ß√µes:
                    
                    Contexto do Projeto: {context}
                    P√∫blico-alvo: {audience}
                    Pontos-chave: {key_points}
                    Tom desejado: {tone}
                    
                    Formate a sa√≠da adequadamente para um {subtype}, incluindo assunto/t√≠tulo e estrutura apropriada.
                    """
                    
                elif current_feature == "Assistente de Reuni√µes":
                    participants = st.text_area("Participantes", 
                                            help="Liste os participantes e suas fun√ß√µes",
                                            height=100,
                                            placeholder="Ex: Jo√£o Silva (Gerente de Projeto), Maria Costa (Desenvolvedora Frontend)",
                                            value=template_data.get('participants', "") if template_data else "")
                    topics = st.text_area("T√≥picos a serem abordados", 
                                        help="Liste os t√≥picos que precisam ser discutidos",
                                        height=150,
                                        placeholder="Ex: Atualiza√ß√£o do cronograma, Bugs pendentes, Feedback do cliente",
                                        value=template_data.get('topics', "") if template_data else "")
                    duration = st.number_input("Dura√ß√£o (minutos)", 
                                           min_value=15, 
                                           max_value=240, 
                                           value=template_data.get('duration', 60) if template_data and 'duration' in template_data else 60, 
                                           step=15)
                    
                    if subtype == "Agenda de Reuni√£o":
                        prompt = f"""
                        Crie uma agenda detalhada para uma reuni√£o de {duration} minutos com base nas seguintes informa√ß√µes:
                        
                        Contexto do Projeto: {context}
                        Participantes: {participants}
                        T√≥picos a serem abordados: {topics}
                        
                        Inclua aloca√ß√£o de tempo para cada item, respons√°veis e objetivos claros.
                        """
                    elif subtype == "Ata/Resumo de Reuni√£o":
                        decisions = st.text_area("Decis√µes tomadas", 
                                            help="Liste as principais decis√µes tomadas durante a reuni√£o",
                                            height=100,
                                            placeholder="Ex: Aprova√ß√£o do novo design, Extens√£o do prazo em 1 semana",
                                            value=template_data.get('decisions', "") if template_data else "")
                        actions = st.text_area("A√ß√µes acordadas", 
                                           help="Liste as a√ß√µes acordadas, respons√°veis e prazos",
                                           height=100,
                                           placeholder="Ex: Jo√£o ir√° corrigir o bug #123 at√© amanh√£, Maria criar√° novos componentes at√© sexta",
                                           value=template_data.get('actions', "") if template_data else "")
                        
                        prompt = f"""
                        Crie uma ata/resumo detalhado para uma reuni√£o de {duration} minutos com base nas seguintes informa√ß√µes:
                        
                        Contexto do Projeto: {context}
                        Participantes: {participants}
                        T√≥picos abordados: {topics}
                        Decis√µes tomadas: {decisions}
                        A√ß√µes acordadas: {actions}
                        
                        Organize por t√≥picos, destacando claramente decis√µes e pr√≥ximos passos com respons√°veis.
                        """
                    else:  # Follow-up
                        meeting_outcome = st.text_area("Resultado da reuni√£o", 
                                                   help="Resuma os principais resultados da reuni√£o",
                                                   height=100,
                                                   placeholder="Ex: Definidas as prioridades para o pr√≥ximo sprint e resolvidos os bloqueios atuais",
                                                   value=template_data.get('meeting_outcome', "") if template_data else "")
                        action_items = st.text_area("Itens de a√ß√£o", 
                                                help="Liste os itens de a√ß√£o, respons√°veis e prazos",
                                                height=100,
                                                placeholder="Ex: Jo√£o: revis√£o de c√≥digo at√© 25/03; Maria: implementa√ß√£o da nova feature at√© 27/03",
                                                value=template_data.get('action_items', "") if template_data else "")
                        
                        prompt = f"""
                        Crie uma mensagem de follow-up para uma reuni√£o com base nas seguintes informa√ß√µes:
                        
                        Contexto do Projeto: {context}
                        Participantes: {participants}
                        T√≥picos abordados: {topics}
                        Resultado da reuni√£o: {meeting_outcome}
                        Itens de a√ß√£o: {action_items}
                        
                        A mensagem deve agradecer a participa√ß√£o, resumir os principais pontos, detalhar pr√≥ximos passos
                        com respons√°veis e prazos, e solicitar confirma√ß√£o/feedback conforme apropriado.
                        """
                        
                elif current_feature == "Tradutor de Jarg√£o T√©cnico":
                    technical_content = st.text_area("Conte√∫do T√©cnico", 
                                                help="Cole aqui o texto t√©cnico que precisa ser traduzido",
                                                height=200,
                                                placeholder="Ex: A implementa√ß√£o do Redux utiliza reducers imut√°veis para gerenciar o estado global da aplica√ß√£o...",
                                                value=template_data.get('technical_content', "") if template_data else "")
                    audience = st.selectbox("P√∫blico-alvo", 
                                        ["Executivos", "Clientes n√£o-t√©cnicos", "Equipe de Neg√≥cios", "Equipe T√©cnica Junior"],
                                        index=["Executivos", "Clientes n√£o-t√©cnicos", "Equipe de Neg√≥cios", "Equipe T√©cnica Junior"].index(template_data.get('audience', "Executivos")) if template_data and 'audience' in template_data else 0)
                    key_concepts = st.text_input("Conceitos-chave a preservar", 
                                            help="Liste conceitos t√©cnicos que devem ser mantidos mesmo se simplificados",
                                            placeholder="Ex: gerenciamento de estado, API, front-end",
                                            value=template_data.get('key_concepts', "") if template_data else "")
                    
                    prompt = f"""
                    Traduza/adapte o seguinte conte√∫do t√©cnico para um p√∫blico de {audience} com base nas seguintes informa√ß√µes:
                    
                    Contexto do Projeto: {context}
                    Conte√∫do T√©cnico Original: {technical_content}
                    Conceitos-chave a preservar: {key_concepts}
                    
                    Para {audience}, foque em: 
                    - {'Impacto nos neg√≥cios e resultados de alto n√≠vel' if audience == 'Executivos' else ''}
                    - {'Benef√≠cios e funcionalidades em linguagem acess√≠vel' if audience == 'Clientes n√£o-t√©cnicos' else ''}
                    - {'Conex√£o com objetivos de neg√≥cios e processos' if audience == 'Equipe de Neg√≥cios' else ''}
                    - {'Explica√ß√µes t√©cnicas mais detalhadas, mas com conceitos explicados' if audience == 'Equipe T√©cnica Junior' else ''}
                    
                    Mantenha a precis√£o conceitual mesmo simplificando a linguagem.
                    """
                    
                elif current_feature == "Facilitador de Feedback":
                    situation = st.text_area("Situa√ß√£o", 
                                        help="Descreva a situa√ß√£o espec√≠fica para a qual voc√™ precisa fornecer feedback",
                                        height=150,
                                        placeholder="Ex: Atraso na entrega de componentes para o projeto principal...",
                                        value=template_data.get('situation', "") if template_data else "")
                    strengths = st.text_area("Pontos Fortes", 
                                        help="Liste aspectos positivos que devem ser destacados",
                                        height=100,
                                        placeholder="Ex: Qualidade do c√≥digo entregue, comunica√ß√£o proativa de desafios",
                                        value=template_data.get('strengths', "") if template_data else "")
                    areas_for_improvement = st.text_area("√Åreas para Melhoria", 
                                                    help="Liste aspectos que precisam ser melhorados",
                                                    height=100,
                                                    placeholder="Ex: Estimativas de tempo irrealistas, falha em pedir ajuda quando bloqueado",
                                                    value=template_data.get('areas_for_improvement', "") if template_data else "")
                    relationship = st.selectbox("Rela√ß√£o com o Receptor", 
                                            ["Membro da equipe direto", "Colega de mesmo n√≠vel", "Superior hier√°rquico", "Cliente", "Fornecedor"],
                                            index=["Membro da equipe direto", "Colega de mesmo n√≠vel", "Superior hier√°rquico", "Cliente", "Fornecedor"].index(template_data.get('relationship', "Membro da equipe direto")) if template_data and 'relationship' in template_data else 0)
                    
                    prompt = f"""
                    Estruture um {subtype} construtivo e eficaz com base nas seguintes informa√ß√µes:
                    
                    Contexto do Projeto: {context}
                    Situa√ß√£o espec√≠fica: {situation}
                    Pontos fortes a destacar: {strengths}
                    √Åreas para melhoria: {areas_for_improvement}
                    Rela√ß√£o com o receptor: {relationship}
                    
                    O feedback deve:
                    - Ser espec√≠fico e baseado em comportamentos observ√°veis
                    - Equilibrar aspectos positivos e √°reas de melhoria
                    - Incluir exemplos concretos
                    - Oferecer sugest√µes acion√°veis
                    - Usar tom apropriado para a rela√ß√£o ({relationship})
                    - Focar em crescimento e desenvolvimento, n√£o em cr√≠tica
                    
                    Formate como um roteiro/script que o usu√°rio pode seguir na conversa ou adaptar para uma comunica√ß√£o escrita.
                    """
                    
                elif current_feature == "Detector de Riscos de Comunica√ß√£o":
                    content_to_analyze = st.text_area("Conte√∫do para An√°lise", 
                                                  help="Cole aqui o texto que voc√™ deseja analisar quanto a riscos de comunica√ß√£o",
                                                  height=200,
                                                  placeholder="Ex: Devido a circunst√¢ncias imprevistas no desenvolvimento, alguns recursos podem sofrer atrasos...",
                                                  value=template_data.get('content_to_analyze', "") if template_data else "")
                    audience = st.text_input("P√∫blico-alvo", 
                                        help="Descreva quem receber√° esta comunica√ß√£o",
                                        placeholder="Ex: Cliente executivo com pouco conhecimento t√©cnico",
                                        value=template_data.get('audience', "") if template_data else "")
                    stakes = st.select_slider("Import√¢ncia da Comunica√ß√£o", 
                                          options=["Baixa", "M√©dia", "Alta", "Cr√≠tica"],
                                          value=template_data.get('stakes', "M√©dia") if template_data else "M√©dia")
                    
                    prompt = f"""
                    Analise o seguinte {subtype} quanto a riscos de comunica√ß√£o:
                    
                    Contexto do Projeto: {context}
                    P√∫blico-alvo: {audience}
                    Import√¢ncia da comunica√ß√£o: {stakes}
                    
                    Conte√∫do para an√°lise:
                    ---
                    {content_to_analyze}
                    ---
                    
                    Sua an√°lise deve:
                    1. Identificar ambiguidades, informa√ß√µes incompletas ou confusas
                    2. Apontar poss√≠veis mal-entendidos baseados no p√∫blico-alvo
                    3. Detectar problemas de tom ou linguagem inapropriada
                    4. Identificar informa√ß√µes sens√≠veis ou potencialmente problem√°ticas
                    5. Sugerir reformula√ß√µes espec√≠ficas para cada problema identificado
                    
                    Organize sua an√°lise em forma de tabela com colunas para: Trecho problem√°tico, Risco potencial, Sugest√£o de melhoria.
                    Ao final, forne√ßa uma avalia√ß√£o geral dos riscos de comunica√ß√£o (Baixo/M√©dio/Alto) e um resumo das principais recomenda√ß√µes.
                    """
                
                # Usar o modelo selecionado na barra lateral
                model = st.session_state.model_choice
                model_info = ""
                
                if model == "gpt-3.5-turbo":
                    model_info = "Usando GPT-3.5 Turbo (mais r√°pido)"
                else:
                    model_info = "Usando GPT-4 (mais capaz, maior consumo)"
                
                st.caption(model_info)
                
                submit_button = st.form_submit_button(f"Gerar {current_feature}")
            
            if submit_button:
                if not st.session_state.api_key_configured:
                    st.error("API n√£o configurada. Por favor, contate o administrador.")
                elif st.session_state.token_count >= TOKEN_LIMIT:
                    st.error(f"Voc√™ atingiu o limite de {TOKEN_LIMIT} tokens para esta sess√£o. Por favor, tente novamente mais tarde.")
                elif st.session_state.request_count >= REQUEST_LIMIT:
                    st.error(f"Voc√™ atingiu o limite de {REQUEST_LIMIT} requisi√ß√µes para esta sess√£o. Por favor, tente novamente mais tarde.")
                elif time.time() - st.session_state.last_request_time < RATE_LIMIT_SECONDS and st.session_state.request_count > 0:
                    wait_time = round(RATE_LIMIT_SECONDS - (time.time() - st.session_state.last_request_time))
                    st.warning(f"Por favor, aguarde {wait_time} segundos antes de fazer outra requisi√ß√£o.")
                else:
                    # Gerar conte√∫do usando o modelo selecionado
                    generated_content = generate_content(prompt, model=model, temperature=0.7)
                    st.session_state.generated_content = generated_content
                    
                    # Exibir resultado
                    st.markdown("### Resultado")
                    st.markdown('<div class="result-area">', unsafe_allow_html=True)
                    st.markdown(generated_content)
                    st.markdown('</div>', unsafe_allow_html=True)
                    
                    # Op√ß√µes de exporta√ß√£o aprimoradas
                    enhanced_export_options(generated_content, current_feature)
                    
                    # Feedback sobre o resultado
                    st.markdown("### Este resultado foi √∫til?")
                    col1, col2 = st.columns(2)
                    with col1:
                        if st.button("üëç Sim, foi √∫til"):
                            st.markdown('<p class="feedback-good">Obrigado pelo feedback positivo!</p>', unsafe_allow_html=True)
                    
                    with col2:
                        if st.button("üëé N√£o, preciso de melhoria"):
                            st.markdown('<p class="feedback-bad">Lamentamos que n√£o tenha atendido suas expectativas. Por favor, forne√ßa detalhes no campo de feedback na barra lateral para podermos melhorar.</p>', unsafe_allow_html=True)
    
    # ================= FOOTER =================
    
    # Nota para o artigo
    st.write("")
    st.write("")
    st.markdown("""
    ---
    ### Sobre esta demonstra√ß√£o do NEXUS
    
    Este aplicativo √© uma vers√£o de demonstra√ß√£o do NEXUS, um assistente de IA para comunica√ß√£o de projetos. Foi criado como parte do artigo "**Comunica√ß√£o eficiente em projetos: como a IA pode ajudar gerentes e equipes**".
    
    Para implementar o NEXUS em seu pr√≥prio ambiente:
    1. Acesse o c√≥digo-fonte no GitHub: [github.com/seu-usuario/nexus-assistant](https://github.com/seu-usuario/nexus-assistant)
    2. Siga as instru√ß√µes de instala√ß√£o no README
    3. Configure com sua pr√≥pria chave API da OpenAI
    4. Personalize para as necessidades espec√≠ficas da sua equipe
    
    **Experimente as cinco funcionalidades principais do NEXUS e veja como a IA pode transformar a comunica√ß√£o nos seus projetos!**
    """)
    
    # Rodap√© com cr√©ditos
    st.markdown("""
    <div style="text-align: center; color: gray; font-size: 0.8rem;">
        NEXUS | Assistente de Comunica√ß√£o de Projetos | ¬© 2025
    </div>
    """, unsafe_allow_html=True)

# Executar o aplicativo
if __name__ == "__main__":
    main()
        
        try:
            # Carregar dados do cache
            with open(cache_file, 'r', encoding='utf-8') as f:
                cache_data = json.load(f)
            
            # Verificar TTL (Time To Live)
            cache_time = datetime.fromisoformat(cache_data['timestamp'])
            if cache_time + timedelta(hours=self.ttl_hours) < datetime.now():
                # Cache expirado
                return None
            
            return cache_data
        except Exception as e:
            # Em caso de erro, ignorar o cache
            print(f"Erro ao ler cache: {str(e)}")
            return None
    
    def save_to_cache(self, prompt, model, temperature, response_data):
        """
        Salva uma resposta da API no cache
        
        Args:
            prompt (str): O prompt enviado para a API
            model (str): O modelo usado (ex: gpt-3.5-turbo)
            temperature (float): A temperatura usada para gera√ß√£o
            response_data (dict): Dados da resposta da API
        """
        cache_key = self.get_cache_key(prompt, model, temperature)
        cache_file = os.path.join(self.cache_dir, f"{cache_key}.json")
        
        # Preparar dados para cache
        cache_data = {
            'timestamp': datetime.now().isoformat(),
            'prompt': prompt,
            'model': model,
            'temperature': temperature,
            'response': response_data
        }
        
        try:
            # Salvar no cache
            with open(cache_file, 'w', encoding='utf-8') as f:
                json.dump(cache_data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"Erro ao salvar cache: {str(e)}")

# ================= BIBLIOTECA DE TEMPLATES PR√â-CONFIGURADOS =================

# Estrutura de templates pr√©-configurados
template_library = {
    "Gerador de Comunica√ß√µes Estruturadas": {
        "E-mail de Atraso de Projeto": {
            "description": "E-mail para comunicar atraso em cronograma de projeto",
            "template": {
                "context": "Projeto {nome_projeto}, fase de {fase_atual}",
                "audience": "Cliente, {cargo_cliente} da empresa {nome_empresa}",
                "key_points": "Atraso de {dias} dias devido a {motivo}; Plano de recupera√ß√£o com {solucao}; Impacto {impacto} no prazo final",
                "tone": "Formal"
            },
            "prompt_template": """
            Gere um E-mail Profissional para comunicar um atraso de projeto com base nas seguintes informa√ß√µes:
            
            Contexto do Projeto: Projeto {nome_projeto}, fase de {fase_atual}
            P√∫blico-alvo: Cliente, {cargo_cliente} da empresa {nome_empresa}
            Pontos-chave: 
            - Atraso de {dias} dias devido a {motivo}
            - Plano de recupera√ß√£o com {solucao}
            - Impacto {impacto} no prazo final
            Tom desejado: Formal
            
            O e-mail deve ser transparente sobre o problema, mas focado em solu√ß√µes e pr√≥ximos passos.
            Inclua um assunto claro, sauda√ß√£o apropriada, corpo estruturado e fechamento profissional.
            """
        },
        "Relat√≥rio de Status Semanal": {
            "description": "Relat√≥rio padr√£o de status semanal de projeto",
            "template": {
                "context": "Projeto {nome_projeto}, semana {numero_semana}",
                "audience": "Equipe e stakeholders",
                "key_points": "Progresso: {progresso}; Pr√≥ximos passos: {proximos_passos}; Riscos: {riscos}; Bloqueios: {bloqueios}",
                "tone": "Neutro"
            },
            "prompt_template": """
            Gere um Relat√≥rio de Status detalhado para a semana com base nas seguintes informa√ß√µes:
            
            Contexto do Projeto: Projeto {nome_projeto}, semana {numero_semana}
            P√∫blico-alvo: Equipe e stakeholders
            Pontos-chave:
            - Progresso da semana: {progresso}
            - Pr√≥ximos passos: {proximos_passos}
            - Riscos identificados: {riscos}
            - Bloqueios atuais: {bloqueios}
            Tom desejado: Neutro
            
            O relat√≥rio deve ser conciso mas informativo, organizado por se√ß√µes claras, e incluir um resumo executivo no in√≠cio.
            Use marcadores para facilitar a leitura r√°pida de informa√ß√µes importantes.
            """
        },
        "Comunicado de Mudan√ßa de Escopo": {
            "description": "Comunicado formal sobre mudan√ßa de escopo de projeto",
            "template": {
                "context": "Projeto {nome_projeto}, fase de {fase_atual}",
                "audience": "Todos os stakeholders",
                "key_points": "Mudan√ßa nos requisitos {requisitos}; Impacto em {impacto}; Ajustes necess√°rios: {ajustes}",
                "tone": "Formal"
            },
            "prompt_template": """
            Gere um Comunicado Formal sobre mudan√ßa de escopo com base nas seguintes informa√ß√µes:
            
            Contexto do Projeto: Projeto {nome_projeto}, fase de {fase_atual}
            P√∫blico-alvo: Todos os stakeholders
            Pontos-chave:
            - Mudan√ßa nos requisitos: {requisitos}
            - Impacto em: {impacto}
            - Ajustes necess√°rios: {ajustes}
            Tom desejado: Formal
            
            O comunicado deve explicar claramente a mudan√ßa, justificar sua necessidade, detalhar impactos no projeto
            (cronograma, or√ßamento, recursos) e apresentar pr√≥ximos passos para implementa√ß√£o da mudan√ßa.
            """
        }
    },
    "Assistente de Reuni√µes": {
        "Agenda de Reuni√£o de In√≠cio de Projeto": {
            "description": "Agenda para kickoff de um novo projeto",
            "template": {
                "context": "In√≠cio do projeto {nome_projeto}",
                "participants": "{lista_participantes}",
                "topics": "Apresenta√ß√µes; Vis√£o geral do projeto; Objetivos e escopo; Cronograma preliminar; Pap√©is e responsabilidades; Pr√≥ximos passos",
                "duration": 90
            },
            "prompt_template": """
            Crie uma agenda detalhada para uma reuni√£o de kickoff de projeto de 90 minutos com base nas seguintes informa√ß√µes:
            
            Contexto do Projeto: In√≠cio do projeto {nome_projeto}
            Participantes: {lista_participantes}
            T√≥picos a serem abordados:
            - Apresenta√ß√µes da equipe
            - Vis√£o geral do projeto
            - Objetivos e escopo
            - Cronograma preliminar
            - Pap√©is e responsabilidades
            - Pr√≥ximos passos
            
            Inclua aloca√ß√£o de tempo para cada item, respons√°veis e objetivos claros para cada segmento da reuni√£o.
            Adicione um espa√ßo para perguntas e discuss√£o ao final.
            """
        },
        "Ata de Reuni√£o de Alinhamento": {
            "description": "Modelo de ata para reuni√µes de alinhamento de equipe",
            "template": {
                "context": "Projeto {nome_projeto}, fase de {fase_atual}",
                "participants": "{lista_participantes}",
                "topics": "Status atual; Bloqueios; Pr√≥ximos passos",
                "duration": 30,
                "decisions": "Decis√µes sobre {decisoes}",
                "actions": "A√ß√µes: {acoes}"
            },
            "prompt_template": """
            Crie uma ata/resumo detalhado para uma reuni√£o de alinhamento com base nas seguintes informa√ß√µes:
            
            Contexto do Projeto: Projeto {nome_projeto}, fase de {fase_atual}
            Participantes: {lista_participantes}
            T√≥picos abordados:
            - Status atual do projeto
            - Bloqueios identificados
            - Pr√≥ximos passos
            Decis√µes tomadas: {decisoes}
            A√ß√µes acordadas: {acoes}
            
            Organize por t√≥picos, destacando claramente decis√µes e pr√≥ximos passos com respons√°veis e prazos.
            Seja conciso mas completo, focando nas informa√ß√µes mais relevantes.
            """
        }
    },
    "Tradutor de Jarg√£o T√©cnico": {
        "Explica√ß√£o de Conceito T√©cnico para Executivos": {
            "description": "Adaptar explica√ß√£o t√©cnica para executivos",
            "template": {
                "context": "{contexto}",
                "technical_content": "{conteudo_tecnico}",
                "audience": "Executivos",
                "key_concepts": "{conceitos_chave}"
            },
            "prompt_template": """
            Traduza/adapte o seguinte conte√∫do t√©cnico para executivos com base nas seguintes informa√ß√µes:
            
            Contexto do Projeto: {contexto}
            Conte√∫do T√©cnico Original: {conteudo_tecnico}
            Conceitos-chave a preservar: {conceitos_chave}
            
            Para executivos, foque em: 
            - Impacto nos neg√≥cios e resultados de alto n√≠vel
            - ROI e valor estrat√©gico
            - Riscos e oportunidades principais
            - Decis√µes necess√°rias
            
            Use analogias de neg√≥cios quando poss√≠vel e limite a extens√£o a no m√°ximo dois par√°grafos.
            Evite jarg√£o t√©cnico a menos que seja absolutamente necess√°rio.
            """
        }
    },
    "Facilitador de Feedback": {
        "Feedback sobre Entrega Atrasada": {
            "description": "Estrutura de feedback para atrasos em entregas",
            "template": {
                "context": "Projeto {nome_projeto}",
                "situation": "Atraso na entrega do {entregavel} para o projeto {nome_projeto}",
                "strengths": "Qualidade do trabalho entregue; Comunica√ß√£o proativa",
                "areas_for_improvement": "Estimativas de tempo; Pedido de ajuda antecipado",
                "relationship": "Membro da equipe direto"
            },
            "prompt_template": """
            Estruture um feedback construtivo sobre atraso em entrega com base nas seguintes informa√ß√µes:
            
            Contexto do Projeto: Projeto {nome_projeto}
            Situa√ß√£o espec√≠fica: Atraso na entrega do {entregavel}
            Pontos fortes a destacar:
            - Qualidade do trabalho entregue
            - Comunica√ß√£o proativa dos desafios
            √Åreas para melhoria:
            - Estimativas de tempo mais realistas
            - Pedir ajuda mais cedo quando enfrentar obst√°culos
            Rela√ß√£o com o receptor: Membro da equipe direto
            
            O feedback deve seguir a estrutura SBI (Situa√ß√£o-Comportamento-Impacto) e incluir perguntas
            para entender a perspectiva do colaborador, al√©m de um plano conjunto para melhoria.
            """
        }
    },
    "Detector de Riscos de Comunica√ß√£o": {
        "An√°lise de Proposta para Cliente": {
            "description": "An√°lise de riscos em proposta comercial",
            "template": {
                "context": "Nova proposta para o cliente {nome_cliente}",
                "content_to_analyze": "{conteudo_proposta}",
                "audience": "Cliente potencial, decisores de neg√≥cio",
                "stakes": "Alta"
            },
            "prompt_template": """
            Analise a seguinte proposta comercial quanto a riscos de comunica√ß√£o:
            
            Contexto do Projeto: Nova proposta para o cliente {nome_cliente}
            P√∫blico-alvo: Decisores de neg√≥cio com conhecimento t√©cnico limitado
            Import√¢ncia da comunica√ß√£o: Alta
            
            Conte√∫do para an√°lise:
            ---
            {conteudo_proposta}
            ---
            
            Sua an√°lise deve:
            1. Identificar promessas vagas ou arriscadas
            2. Detectar linguagem t√©cnica que pode confundir o p√∫blico-alvo
            3. Encontrar poss√≠veis ambiguidades em escopo, prazos ou deliverables
            4. Identificar termos que podem gerar expectativas irrealistas
            5. Sugerir reformula√ß√µes espec√≠ficas para cada problema identificado
            
            Organize como tabela com: Trecho problem√°tico, Risco potencial, Sugest√£o de melhoria.
            Ao final, forne√ßa uma avalia√ß√£o geral dos riscos e recomenda√ß√µes-chave.
            """
        }
    }
}

# ================= SESSION STATE INITIALIZATION =================

# Inicializa√ß√£o da sess√£o
if 'api_key_configured' not in st.session_state:
    st.session_state.api_key_configured = True
    # Configurar API key automaticamente a partir dos secrets
    if st.secrets.get("OPENAI_API_KEY"):
        st.session_state.api_key = st.secrets.get("OPENAI_API_KEY")
    else:
        st.session_state.api_key = None
        st.session_state.api_key_configured = False

if 'usage_data' not in st.session_state:
    st.session_state.usage_data = []
if 'generated_content' not in st.session_state:
    st.session_state.generated_content = ""
if 'history' not in st.session_state:
    st.session_state.history = []
if 'token_count' not in st.session_state:
    st.session_state.token_count = 0
if 'request_count' not in st.session_state:
    st.session_state.request_count = 0
if 'last_request_time' not in st.session_state:
    st.session_state.last_request_time = 0
if 'session_id' not in st.session_state:
    st.session_state.session_id = datetime.now().strftime("%Y%m%d%H%M%S") + str(hash(datetime.now()))[:5]
if 'current_feature' not in st.session_state:
    st.session_state.current_feature = ""
if 'openai_cache' not in st.session_state:
    st.session_state.openai_cache = OpenAICache()
if 'history_expanded' not in st.session_state:
    st.session_state.history_expanded = False
if 'model_choice' not in st.session_state:
    st.session_state.model_choice = "gpt-3.5-turbo"
if 'export_format' not in st.session_state:
    st.session_state.export_format = "text"

# ================= HELPER FUNCTIONS =================

# Fun√ß√£o para gerar conte√∫do via API OpenAI com cache
def generate_content(prompt, model="gpt-3.5-turbo", temperature=0.7):
    if not st.session_state.api_key_configured or not st.session_state.api_key:
        return "API n√£o configurada. Por favor, contate o administrador."
    
    # Verificar limites
    if st.session_state.token_count >= TOKEN_LIMIT:
        return "Voc√™ atingiu o limite de tokens para esta sess√£o. Por favor, tente novamente mais tarde."
    
    if st.session_state.request_count >= REQUEST_LIMIT:
        return "Voc√™ atingiu o limite de requisi√ß√µes para esta sess√£o. Por favor, tente novamente mais tarde."
    
    # Verificar limites de taxa (rate limits)
    current_time = time.time()
    if current_time - st.session_state.last_request_time < RATE_LIMIT_SECONDS and st.session_state.request_count > 0:
        wait_time = round(RATE_LIMIT_SECONDS - (current_time - st.session_state.last_request_time))
        return f"Por favor, aguarde {wait_time} segundos antes de fazer outra requisi√ß√£o."
    
    # Tentar buscar resposta do cache
    cache_result = st.session_state.openai_cache.get_from_cache(prompt, model, temperature)
    
    if cache_result:
        # Usar cache e atualizar contadores
        content = cache_result['response']['choices'][0]['message']['content']
        
        # Atualizar contadores de tokens (usando valores do cache)
        total_tokens = cache_result['response']['usage']['total_tokens']
        st.session_state.token_count += total_tokens
        
        # N√£o incrementa o contador de requisi√ß√µes pois usou cache
        # Mas atualiza o timestamp da √∫ltima requisi√ß√£o para evitar spam
        st.session_state.last_request_time = current_time
        
        # Registrar uso (marcando como cache)
        st.session_state.usage_data.append({
            'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            'feature': st.session_state.current_feature,
            'tokens': total_tokens,
            'model': model,
            'session_id': st.session_state.session_id,
            'from_cache': True
        })
        
        # Adicionar ao hist√≥rico
        st.session_state.history.append({
            'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            'feature': st.session_state.current_feature,
            'input': prompt[:100] + "..." if len(prompt) > 100 else prompt,
            'output': content,
            'model': model,
            'session_id': st.session_state.session_id,
            'from_cache': True
        })
        
        return content
    
    try:
        with st.spinner("Gerando conte√∫do..."):
            # Atualizar o timestamp da √∫ltima requisi√ß√£o
            st.session_state.last_request_time = current_time
            
            # Incrementar contador de requisi√ß√µes
            st.session_state.request_count += 1
            
            # Configurar requisi√ß√£o direta √† API
            headers = {
                "Content-Type": "application/json",
                "Authorization": f"Bearer {st.session_state.api_key}"
            }
            
            # Adicionar mensagem do sistema e prompt do usu√°rio
            payload = {
                "model": model,
                "messages": [
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": prompt}
                ],
                "temperature": temperature,
                "max_tokens": 1500  # Limitado para economizar tokens
            }
            
            # Fazer a requisi√ß√£o √† API
            response = requests.post(
                "https://api.openai.com/v1/chat/completions",
                headers=headers,
                data=json.dumps(payload),
                timeout=60
            )
            
            # Processar a resposta
            if response.status_code == 200:
                result = response.json()
                content = result['choices'][0]['message']['content']
                
                # Atualizar contadores de tokens
                prompt_tokens = result['usage']['prompt_tokens']
                completion_tokens = result['usage']['completion_tokens']
                total_tokens = result['usage']['total_tokens']
                st.session_state.token_count += total_tokens
                
                # Registrar uso
                st.session_state.usage_data.append({
                    'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                    'feature': st.session_state.current_feature,
                    'tokens': total_tokens,
                    'model': model,
                    'session_id': st.session_state.session_id,
                    'from_cache': False
                })
                
                # Adicionar ao hist√≥rico
                st.session_state.history.append({
                    'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                    'feature': st.session_state.current_feature,
                    'input': prompt[:100] + "..." if len(prompt) > 100 else prompt,
                    'output': content,
                    'model': model,
                    'session_id': st.session_state.session_id,
                    'from_cache': False
                })
                
                # Salvar no cache para uso futuro
                st.session_state.openai_cache.save_to_cache(prompt, model, temperature, result)
                
                return content
            else:
                return f"Erro na API (Status {response.status_code}): {response.text}"
        
    except Exception as e:
        return f"Erro ao gerar conte√∫do: {str(e)}"

# Fun√ß√£o para exportar conte√∫do como DOCX
def export_as_docx(content, filename="documento"):
    doc = docx.Document()
    
    # Adicionar t√≠tulo
    doc.add_heading(f"{st.session_state.current_feature}", 0)
    
    # Dividir por linhas e adicionar par√°grafos
    paragraphs = content.split('\n')
    for para in paragraphs:
        if para.strip() == "":
            continue
        
        #
