import streamlit as st
from openai import OpenAI
import pandas as pd
from datetime import datetime
import plotly.express as px
import os
import re
import docx
from io import BytesIO

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="NEXUS - Assistente de Comunica√ß√£o de Projetos",
    page_icon="üìã",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Estilos CSS personalizados
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #1E3A8A;
        text-align: center;
        margin-bottom: 1rem;
    }
    .sub-header {
        font-size: 1.2rem;
        color: #3B82F6;
        text-align: center;
        margin-bottom: 2rem;
    }
    .feature-card {
        background-color: #F3F4F6;
        border-radius: 10px;
        padding: 20px;
        margin-bottom: 20px;
        border-left: 5px solid #3B82F6;
    }
    .result-area {
        background-color: #F0F9FF;
        border-radius: 10px;
        padding: 20px;
        margin: 20px 0;
        border: 1px solid #BAE6FD;
    }
    .sidebar-content {
        padding: 20px 10px;
    }
    .metric-card {
        background-color: #FAFAFA;
        border-radius: 8px;
        padding: 15px;
        margin: 10px 0;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    .feedback-good {
        color: #059669;
        font-weight: bold;
    }
    .feedback-bad {
        color: #DC2626;
        font-weight: bold;
    }
</style>
""", unsafe_allow_html=True)

# Inicializa√ß√£o da sess√£o
if 'client' not in st.session_state:
    st.session_state.client = None
if 'usage_data' not in st.session_state:
    st.session_state.usage_data = []
if 'api_key_configured' not in st.session_state:
    st.session_state.api_key_configured = False
if 'generated_content' not in st.session_state:
    st.session_state.generated_content = ""
if 'history' not in st.session_state:
    st.session_state.history = []

# Sidebar para configura√ß√£o
with st.sidebar:
    st.markdown('<div class="sidebar-content">', unsafe_allow_html=True)
    st.image("https://via.placeholder.com/150x150.png?text=NEXUS", width=150)
    st.markdown("## Configura√ß√µes")
    
    # API Key Input
    api_key = st.text_input("OpenAI API Key", type="password", help="Insira sua chave de API da OpenAI")
    
    if api_key:
        try:
            st.session_state.client = OpenAI(api_key=api_key)
            if not st.session_state.api_key_configured:
                st.session_state.api_key_configured = True
                st.success("API configurada com sucesso!")
        except Exception as e:
            st.error(f"Erro ao configurar a API: {e}")
    
    # Configura√ß√µes do modelo
    st.markdown("### Modelo e Par√¢metros")
    model = st.selectbox("Modelo", ["gpt-3.5-turbo", "gpt-4o", "gpt-4"])
    temperature = st.slider("Temperatura (Criatividade)", 0.0, 1.0, 0.7, 0.1)
    
    # Exibir estat√≠sticas
    if st.session_state.usage_data:
        st.markdown("### Estat√≠sticas de Uso")
        usage_df = pd.DataFrame(st.session_state.usage_data)
        
        col1, col2 = st.columns(2)
        with col1:
            st.markdown('<div class="metric-card">', unsafe_allow_html=True)
            st.metric("Total de Gera√ß√µes", len(usage_df))
            st.markdown('</div>', unsafe_allow_html=True)
        
        with col2:
            if 'tokens' in usage_df.columns:
                st.markdown('<div class="metric-card">', unsafe_allow_html=True)
                st.metric("Tokens Utilizados", usage_df['tokens'].sum())
                st.markdown('</div>', unsafe_allow_html=True)
        
        # Gr√°fico de uso por categoria
        if 'feature' in usage_df.columns and len(usage_df) > 1:
            feature_counts = usage_df['feature'].value_counts().reset_index()
            feature_counts.columns = ['Funcionalidade', 'Contagem']
            
            fig = px.bar(feature_counts, x='Funcionalidade', y='Contagem', 
                        title='Uso por Funcionalidade',
                        color='Funcionalidade')
            st.plotly_chart(fig, use_container_width=True)
    
    # Feedback
    st.markdown("### Feedback")
    feedback = st.radio("Como est√° sua experi√™ncia?", ["üòÄ Excelente", "üôÇ Boa", "üòê Neutra", "üôÅ Ruim", "üòû P√©ssima"])
    feedback_text = st.text_area("Coment√°rios adicionais")
    
    if st.button("Enviar Feedback"):
        st.success("Feedback enviado. Obrigado por nos ajudar a melhorar!")
    
    st.markdown("</div>", unsafe_allow_html=True)

# Fun√ß√£o para gerar conte√∫do via OpenAI
def generate_content(prompt, model="gpt-3.5-turbo", temperature=0.7):
    if not st.session_state.client:
        return "Por favor, configure sua API key na barra lateral."
    
    try:
        with st.spinner("Gerando conte√∫do..."):
            response = st.session_state.client.chat.completions.create(
                model=model,
                messages=[{"role": "system", "content": system_prompt}, 
                          {"role": "user", "content": prompt}],
                temperature=temperature
            )
        
        result = response.choices[0].message.content
        
        # Registrar uso
        st.session_state.usage_data.append({
            'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            'feature': current_feature,
            'tokens': response.usage.total_tokens,
            'model': model
        })
        
        # Adicionar ao hist√≥rico
        st.session_state.history.append({
            'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            'feature': current_feature,
            'input': prompt,
            'output': result,
            'model': model
        })
        
        return result
    
    except Exception as e:
        return f"Erro ao gerar conte√∫do: {str(e)}"

# Fun√ß√£o para exportar conte√∫do como DOCX
def export_as_docx(content, filename="documento"):
    doc = docx.Document()
    
    # Adicionar t√≠tulo
    doc.add_heading(f"{current_feature}", 0)
    
    # Dividir por linhas e adicionar par√°grafos
    paragraphs = content.split('\n')
    for para in paragraphs:
        if para.strip() == "":
            continue
        
        # Verificar se √© um cabe√ßalho
        if re.match(r'^#{1,6}\s+', para):
            # Extrair o n√≠vel do cabe√ßalho e o texto
            header_match = re.match(r'^(#{1,6})\s+(.*)', para)
            if header_match:
                level = min(len(header_match.group(1)), 9)  # Limitar a 9 para evitar erro
                text = header_match.group(2)
                doc.add_heading(text, level)
        else:
            doc.add_paragraph(para)
    
    # Salvar para um buffer em mem√≥ria
    buffer = BytesIO()
    doc.save(buffer)
    buffer.seek(0)
    
    return buffer

# System prompt base para o assistente
system_prompt = """
Voc√™ √© o NEXUS, um assistente especializado em comunica√ß√£o de projetos. Seu objetivo √© ajudar gerentes de projetos, l√≠deres de equipe e outros profissionais a comunicar-se de forma clara, eficaz e profissional em diversos contextos de projetos.

Voc√™ possui cinco habilidades principais:

1. Gerador de Comunica√ß√µes Estruturadas: Criar e-mails profissionais, relat√≥rios de status e comunicados formais.
2. Assistente de Reuni√µes: Gerar agendas detalhadas, atas e resumos de reuni√µes, e estruturar follow-ups.
3. Tradutor de Jarg√£o T√©cnico: Simplificar linguagem t√©cnica, adaptar comunica√ß√µes para diferentes p√∫blicos e traduzir requisitos t√©cnicos.
4. Facilitador de Feedback: Estruturar feedback construtivo, transformar cr√≠ticas em sugest√µes e criar roteiros para conversas dif√≠ceis.
5. Detector de Riscos de Comunica√ß√£o: Analisar comunica√ß√µes, sugerir alternativas mais claras e avaliar adequa√ß√£o ao p√∫blico.

Ao responder, voc√™ deve:
- Ser conciso mas completo
- Usar linguagem profissional e tom adequado para o contexto
- Estruturar o conte√∫do de forma l√≥gica e clara
- Focar em comunica√ß√£o eficaz e construtiva
- Evitar jarg√µes desnecess√°rios, a menos que sejam apropriados para o p√∫blico-alvo
"""

# Interface principal
st.markdown('<h1 class="main-header">NEXUS</h1>', unsafe_allow_html=True)
st.markdown('<p class="sub-header">Comunica√ß√£o de projetos clara, eficaz e profissional</p>', unsafe_allow_html=True)

# Sele√ß√£o de funcionalidade
feature_options = {
    "Gerador de Comunica√ß√µes Estruturadas": {
        "description": "Crie e-mails profissionais, relat√≥rios de status e comunicados formais a partir de pontos-chave.",
        "icon": "üìß",
        "subtypes": ["E-mail Profissional", "Relat√≥rio de Status", "Comunicado Formal"]
    },
    "Assistente de Reuni√µes": {
        "description": "Gere agendas detalhadas, atas de reuni√µes e mensagens de follow-up estruturadas.",
        "icon": "üìÖ",
        "subtypes": ["Agenda de Reuni√£o", "Ata/Resumo de Reuni√£o", "Follow-up de Reuni√£o"]
    },
    "Tradutor de Jarg√£o T√©cnico": {
        "description": "Simplifique linguagem t√©cnica e adapte comunica√ß√µes para diferentes p√∫blicos.",
        "icon": "üîÑ",
        "subtypes": ["Simplifica√ß√£o de Documento T√©cnico", "Adapta√ß√£o para Executivos", "Adapta√ß√£o para Clientes", "Adapta√ß√£o para Equipe T√©cnica"]
    },
    "Facilitador de Feedback": {
        "description": "Estruture feedback construtivo e prepare roteiros para conversas dif√≠ceis.",
        "icon": "üí¨",
        "subtypes": ["Feedback de Desempenho", "Feedback sobre Entreg√°veis", "Roteiro para Conversa Dif√≠cil"]
    },
    "Detector de Riscos de Comunica√ß√£o": {
        "description": "Analise comunica√ß√µes para identificar ambiguidades e problemas potenciais.",
        "icon": "üîç",
        "subtypes": ["An√°lise de E-mail", "An√°lise de Comunicado", "An√°lise de Proposta", "An√°lise de Documento de Requisitos"]
    }
}

# Inicializar vari√°vel para rastrear funcionalidade atual
current_feature = ""

# Organizar op√ß√µes em colunas
col1, col2 = st.columns(2)

count = 0
for feature, details in feature_options.items():
    if count % 2 == 0:
        with col1:
            with st.expander(f"{details['icon']} {feature}", expanded=False):
                st.markdown(f"**{details['description']}**")
                if st.button(f"Usar {feature}", key=f"select_{feature}"):
                    current_feature = feature
                    st.session_state.current_feature = feature
    else:
        with col2:
            with st.expander(f"{details['icon']} {feature}", expanded=False):
                st.markdown(f"**{details['description']}**")
                if st.button(f"Usar {feature}", key=f"select_{feature}"):
                    current_feature = feature
                    st.session_state.current_feature = feature
    count += 1

# Se uma funcionalidade foi selecionada na sess√£o atual ou anteriormente
if 'current_feature' in st.session_state and st.session_state.current_feature:
    current_feature = st.session_state.current_feature
    feature_details = feature_options[current_feature]
    
    st.markdown(f"## {feature_details['icon']} {current_feature}")
    
    # Interface espec√≠fica da funcionalidade
    with st.form(key=f"{current_feature}_form"):
        st.markdown(f"**{feature_details['description']}**")
        
        # Campo de subtipo
        subtype = st.selectbox("Tipo de Comunica√ß√£o", feature_details['subtypes'])
        
        # Campos comuns a todas as funcionalidades
        context = st.text_area("Contexto do Projeto", 
                              help="Descreva o projeto, fase atual e informa√ß√µes relevantes",
                              height=100)
        
        # Campos espec√≠ficos por funcionalidade
        if current_feature == "Gerador de Comunica√ß√µes Estruturadas":
            audience = st.text_input("P√∫blico-alvo", 
                                   help="Para quem esta comunica√ß√£o ser√° enviada (equipe, cliente, stakeholder)")
            key_points = st.text_area("Pontos-chave", 
                                    help="Liste os principais pontos que devem ser inclu√≠dos na comunica√ß√£o",
                                    height=150)
            tone = st.select_slider("Tom da Comunica√ß√£o", 
                                  options=["Muito Formal", "Formal", "Neutro", "Amig√°vel", "Casual"],
                                  value="Neutro")
            
            prompt = f"""
            Gere um {subtype} com base nas seguintes informa√ß√µes:
            
            Contexto do Projeto: {context}
            P√∫blico-alvo: {audience}
            Pontos-chave: {key_points}
            Tom desejado: {tone}
            
            Formate a sa√≠da adequadamente para um {subtype}, incluindo assunto/t√≠tulo e estrutura apropriada.
            """
            
        elif current_feature == "Assistente de Reuni√µes":
            participants = st.text_area("Participantes", 
                                      help="Liste os participantes e suas fun√ß√µes",
                                      height=100)
            topics = st.text_area("T√≥picos a serem abordados", 
                                help="Liste os t√≥picos que precisam ser discutidos",
                                height=150)
            duration = st.number_input("Dura√ß√£o (minutos)", min_value=15, max_value=240, value=60, step=15)
            
            if subtype == "Agenda de Reuni√£o":
                prompt = f"""
                Crie uma agenda detalhada para uma reuni√£o de {duration} minutos com base nas seguintes informa√ß√µes:
                
                Contexto do Projeto: {context}
                Participantes: {participants}
                T√≥picos a serem abordados: {topics}
                
                Inclua aloca√ß√£o de tempo para cada item, respons√°veis e objetivos claros.
                """
            elif subtype == "Ata/Resumo de Reuni√£o":
                decisions = st.text_area("Decis√µes tomadas", 
                                       help="Liste as principais decis√µes tomadas durante a reuni√£o",
                                       height=100)
                actions = st.text_area("A√ß√µes acordadas", 
                                     help="Liste as a√ß√µes acordadas, respons√°veis e prazos",
                                     height=100)
                
                prompt = f"""
                Crie uma ata/resumo detalhado para uma reuni√£o de {duration} minutos com base nas seguintes informa√ß√µes:
                
                Contexto do Projeto: {context}
                Participantes: {participants}
                T√≥picos abordados: {topics}
                Decis√µes tomadas: {decisions}
                A√ß√µes acordadas: {actions}
                
                Organize por t√≥picos, destacando claramente decis√µes e pr√≥ximos passos com respons√°veis.
                """
            else:  # Follow-up
                meeting_outcome = st.text_area("Resultado da reuni√£o", 
                                             help="Resuma os principais resultados da reuni√£o",
                                             height=100)
                action_items = st.text_area("Itens de a√ß√£o", 
                                          help="Liste os itens de a√ß√£o, respons√°veis e prazos",
                                          height=100)
                
                prompt = f"""
                Crie uma mensagem de follow-up para uma reuni√£o com base nas seguintes informa√ß√µes:
                
                Contexto do Projeto: {context}
                Participantes: {participants}
                T√≥picos abordados: {topics}
                Resultado da reuni√£o: {meeting_outcome}
                Itens de a√ß√£o: {action_items}
                
                A mensagem deve agradecer a participa√ß√£o, resumir os principais pontos, detalhar pr√≥ximos passos
                com respons√°veis e prazos, e solicitar confirma√ß√£o/feedback conforme apropriado.
                """
                
        elif current_feature == "Tradutor de Jarg√£o T√©cnico":
            technical_content = st.text_area("Conte√∫do T√©cnico", 
                                           help="Cole aqui o texto t√©cnico que precisa ser traduzido",
                                           height=200)
            audience = st.selectbox("P√∫blico-alvo", 
                                  ["Executivos", "Clientes n√£o-t√©cnicos", "Equipe de Neg√≥cios", "Equipe T√©cnica Junior"])
            key_concepts = st.text_input("Conceitos-chave a preservar", 
                                       help="Liste conceitos t√©cnicos que devem ser mantidos mesmo se simplificados")
            
            prompt = f"""
            Traduza/adapte o seguinte conte√∫do t√©cnico para um p√∫blico de {audience} com base nas seguintes informa√ß√µes:
            
            Contexto do Projeto: {context}
            Conte√∫do T√©cnico Original: {technical_content}
            Conceitos-chave a preservar: {key_concepts}
            
            Para {audience}, foque em: 
            - {'Impacto nos neg√≥cios e resultados de alto n√≠vel' if audience == 'Executivos' else ''}
            - {'Benef√≠cios e funcionalidades em linguagem acess√≠vel' if audience == 'Clientes n√£o-t√©cnicos' else ''}
            - {'Conex√£o com objetivos de neg√≥cios e processos' if audience == 'Equipe de Neg√≥cios' else ''}
            - {'Explica√ß√µes t√©cnicas mais detalhadas, mas com conceitos explicados' if audience == 'Equipe T√©cnica Junior' else ''}
            
            Mantenha a precis√£o conceitual mesmo simplificando a linguagem.
            """
            
        elif current_feature == "Facilitador de Feedback":
            situation = st.text_area("Situa√ß√£o", 
                                   help="Descreva a situa√ß√£o espec√≠fica para a qual voc√™ precisa fornecer feedback",
                                   height=150)
            strengths = st.text_area("Pontos Fortes", 
                                   help="Liste aspectos positivos que devem ser destacados",
                                   height=100)
            areas_for_improvement = st.text_area("√Åreas para Melhoria", 
                                               help="Liste aspectos que precisam ser melhorados",
                                               height=100)
            relationship = st.selectbox("Rela√ß√£o com o Receptor", 
                                      ["Membro da equipe direto", "Colega de mesmo n√≠vel", "Superior hier√°rquico", "Cliente", "Fornecedor"])
            
            prompt = f"""
            Estruture um {subtype} construtivo e eficaz com base nas seguintes informa√ß√µes:
            
            Contexto do Projeto: {context}
            Situa√ß√£o espec√≠fica: {situation}
            Pontos fortes a destacar: {strengths}
            √Åreas para melhoria: {areas_for_improvement}
            Rela√ß√£o com o receptor: {relationship}
            
            O feedback deve:
            - Ser espec√≠fico e baseado em comportamentos observ√°veis
            - Equilibrar aspectos positivos e √°reas de melhoria
            - Incluir exemplos concretos
            - Oferecer sugest√µes acion√°veis
            - Usar tom apropriado para a rela√ß√£o ({relationship})
            - Focar em crescimento e desenvolvimento, n√£o em cr√≠tica
            
            Formate como um roteiro/script que o usu√°rio pode seguir na conversa ou adaptar para uma comunica√ß√£o escrita.
            """
            
        elif current_feature == "Detector de Riscos de Comunica√ß√£o":
            content_to_analyze = st.text_area("Conte√∫do para An√°lise", 
                                            help="Cole aqui o texto que voc√™ deseja analisar quanto a riscos de comunica√ß√£o",
                                            height=200)
            audience = st.text_input("P√∫blico-alvo", 
                                   help="Descreva quem receber√° esta comunica√ß√£o")
            stakes = st.select_slider("Import√¢ncia da Comunica√ß√£o", 
                                    options=["Baixa", "M√©dia", "Alta", "Cr√≠tica"],
                                    value="M√©dia")
            
            prompt = f"""
            Analise o seguinte {subtype} quanto a riscos de comunica√ß√£o:
            
            Contexto do Projeto: {context}
            P√∫blico-alvo: {audience}
            Import√¢ncia da comunica√ß√£o: {stakes}
            
            Conte√∫do para an√°lise:
            ---
            {content_to_analyze}
            ---
            
            Sua an√°lise deve:
            1. Identificar ambiguidades, informa√ß√µes incompletas ou confusas
            2. Apontar poss√≠veis mal-entendidos baseados no p√∫blico-alvo
            3. Detectar problemas de tom ou linguagem inapropriada
            4. Identificar informa√ß√µes sens√≠veis ou potencialmente problem√°ticas
            5. Sugerir reformula√ß√µes espec√≠ficas para cada problema identificado
            
            Organize sua an√°lise em forma de tabela com colunas para: Trecho problem√°tico, Risco potencial, Sugest√£o de melhoria.
            Ao final, forne√ßa uma avalia√ß√£o geral dos riscos de comunica√ß√£o (Baixo/M√©dio/Alto) e um resumo das principais recomenda√ß√µes.
            """
        
        submit_button = st.form_submit_button(f"Gerar {current_feature}")
    
    if submit_button:
        if st.session_state.api_key_configured:
            # Gerar conte√∫do
            generated_content = generate_content(prompt, model, temperature)
            st.session_state.generated_content = generated_content
            
            # Exibir resultado
            st.markdown("### Resultado")
            st.markdown('<div class="result-area">', unsafe_allow_html=True)
            st.markdown(generated_content)
            st.markdown('</div>', unsafe_allow_html=True)
            
            # Op√ß√µes de download
            col1, col2 = st.columns(2)
            with col1:
                # Download como texto
                st.download_button(
                    label="üìÑ Baixar como TXT",
                    data=generated_content,
                    file_name=f"{current_feature.lower().replace(' ', '_')}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                    mime="text/plain"
                )
            
            with col2:
                # Download como DOCX
                docx_buffer = export_as_docx(generated_content)
                st.download_button(
                    label="üìù Baixar como DOCX",
                    data=docx_buffer,
                    file_name=f"{current_feature.lower().replace(' ', '_')}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.docx",
                    mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                )
            
            # Feedback sobre o resultado
            st.markdown("### Este resultado foi √∫til?")
            col1, col2 = st.columns(2)
            with col1:
                if st.button("üëç Sim, foi √∫til"):
                    st.markdown('<p class="feedback-good">Obrigado pelo feedback positivo!</p>', unsafe_allow_html=True)
            
            with col2:
                if st.button("üëé N√£o, preciso de melhoria"):
                    st.markdown('<p class="feedback-bad">Lamentamos que n√£o tenha atendido suas expectativas. Por favor, forne√ßa detalhes no campo de feedback na barra lateral para podermos melhorar.</p>', unsafe_allow_html=True)
        else:
            st.warning("Por favor, configure sua API key da OpenAI na barra lateral para continuar.")

# Hist√≥rico de gera√ß√µes recentes
if st.session_state.history:
    with st.expander("Hist√≥rico de Gera√ß√µes Recentes", expanded=False):
        for i, item in enumerate(reversed(st.session_state.history[-5:])):
            st.markdown(f"**{item['timestamp']} - {item['feature']}**")
            if st.button(f"Carregar este conte√∫do ‚Ü©Ô∏è", key=f"load_{i}"):
                st.session_state.current_feature = item['feature']
                st.session_state.generated_content = item['output']
                st.experimental_rerun()
            st.markdown("---")

# Rodap√© com cr√©ditos
st.markdown("""
---
<div style="text-align: center; color: gray; font-size: 0.8rem;">
    NEXUS | Assistente de Comunica√ß√£o de Projetos | Criado para gerenciar comunica√ß√µes de projetos com efici√™ncia
</div>
""", unsafe_allow_html=True)
