import streamlit as st
import requests
import json
import pandas as pd
from datetime import datetime
import plotly.express as px
import os
import re
import docx
from io import BytesIO
import time

# ================= CONFIGURATION =================

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="NEXUS - Assistente de Comunica√ß√£o de Projetos",
    page_icon="üìã",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Definindo paleta de cores
nexus_colors = {
    "purple": "#6247AA",
    "orange": "#FF6D2A",
    "teal": "#00C1D5",
    "dark_purple": "#231A41",
    "background": "#F5F5F7",
    "text_primary": "#1D1D1F",
    "text_secondary": "#86868B"
}

st.markdown("""
<style>
    /* Ocultar completamente a sidebar */
    [data-testid="collapsedControl"] {
        display: none;
    }
    section[data-testid="stSidebar"] {
        display: none;
    }
    /* Ajustar a √°rea principal para ocupar toda a largura */
    .main .block-container {
        padding-left: 2rem;
        padding-right: 2rem;
        max-width: 1200px;
    }
</style>
""", unsafe_allow_html=True)

# Base de conhecimento sobre PMBOK 7
PMBOK7_KNOWLEDGE_BASE = {
    "princ√≠pios": [
        "1. Ser um administrador diligente, respeitoso e cuidadoso",
        "2. Criar um ambiente colaborativo da equipe do projeto",
        "3. Envolver efetivamente as partes interessadas",
        "4. Focar no valor",
        "5. Reconhecer, avaliar e responder √†s intera√ß√µes do sistema",
        "6. Demonstrar comportamentos de lideran√ßa",
        "7. Adaptar com base no contexto",
        "8. Incorporar qualidade nos processos e resultados",
        "9. Navegar na complexidade",
        "10. Otimizar respostas a riscos",
        "11. Abra√ßar adaptabilidade e resili√™ncia",
        "12. Permitir mudan√ßa para alcan√ßar o estado futuro previsto"
    ],
    
    "dom√≠nios": [
        "1. Stakeholders (Partes Interessadas)",
        "2. Team (Equipe)",
        "3. Development Approach and Life Cycle (Abordagem de Desenvolvimento e Ciclo de Vida)",
        "4. Planning (Planejamento)",
        "5. Project Work (Trabalho do Projeto)",
        "6. Delivery (Entrega)",
        "7. Measurement (Mensura√ß√£o)",
        "8. Uncertainty (Incerteza)"
    ],
    
    "metodologias": {
        "preditiva": "Abordagem tradicional (cascata) com fases sequenciais",
        "adaptativa": "Abordagens √°geis e iterativas (Scrum, Kanban, etc.)",
        "h√≠brida": "Combina√ß√£o de elementos preditivos e adaptativos"
    },
    
    "mudancas_principais": [
        "1. Transi√ß√£o de processos para princ√≠pios e dom√≠nios de performance",
        "2. Foco em entrega de valor em vez de apenas escopo, tempo e custo",
        "3. Maior √™nfase em adaptabilidade e contexto",
        "4. Abordagem de sistemas em vez de processos isolados",
        "5. Reconhecimento de m√∫ltiplas abordagens (adaptativa, preditiva, h√≠brida)",
        "6. Maior √™nfase na lideran√ßa e soft skills",
        "7. Vis√£o hol√≠stica do gerenciamento de projetos"
    ]
}

# Limites ampliados para melhor experi√™ncia do usu√°rio
TOKEN_LIMIT = 100000    # Aumentado para permitir intera√ß√µes mais longas
REQUEST_LIMIT = 50      # Aumentado para permitir mais consultas por sess√£o

# CSS Personalizado
st.markdown("""
<style>
    /* Vari√°veis de cores */
    :root {
        --purple: #6247AA;
        --orange: #FF6D2A;
        --teal: #00C1D5;
        --dark-purple: #231A41;
        --background: #F5F5F7;
        --text-primary: #1D1D1F;
        --text-secondary: #86868B;
    }
    
    /* Reset e estilos gerais */
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: 'SF Pro Text', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    }
    
    /* Corpo principal */
    .main {
        background-color: var(--background);
        padding: 1rem;
    }
    
    .stApp {
        background-color: var(--background);
    }
    
    /* Cabe√ßalho gradiente */
    .header-gradient {
        background: linear-gradient(90deg, var(--purple) 0%, var(--orange) 50%, var(--teal) 100%);
        padding: 1rem 2rem;
        color: white;
        border-radius: 10px;
        margin-bottom: 1.5rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    
    /* Cart√µes para funcionalidades */
    .card-container {
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
        margin-bottom: 1.5rem;
    }
    
    .feature-card {
        background-color: white;
        border-radius: 10px;
        padding: 1.2rem;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0 1px 3px rgba(0,0,0,0.05);
        flex: 1;
        min-width: 200px;
        border: 1px solid #E2E8F0;
    }
    
    .feature-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    }
    
    .card-purple {
        border-left: 4px solid var(--purple);
    }
    
    .card-orange {
        border-left: 4px solid var(--orange);
    }
    
    .card-teal {
        border-left: 4px solid var(--teal);
    }

    /* Formul√°rios */
    .form-container {
        background-color: white;
        border-radius: 10px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 1px 3px rgba(0,0,0,0.05);
    }
    
    .form-title {
        font-size: 1.5rem;
        color: var(--dark-purple);
        margin-bottom: 1rem;
    }
    
    /* Campos de entrada */
    .stTextInput > div > div > input {
        border-radius: 8px;
        border: 1px solid #E2E8F0;
        padding: 10px 15px;
        background-color: var(--background);
    }
    
    .stTextInput > div > div > input:focus {
        border-color: var(--purple);
        box-shadow: 0 0 0 2px rgba(98, 71, 170, 0.2);
    }
    
    .stTextArea > div > div > textarea {
        border-radius: 8px;
        border: 1px solid #E2E8F0;
        padding: 10px 15px;
        background-color: var(--background);
    }
    
    .stTextArea > div > div > textarea:focus {
        border-color: var(--purple);
        box-shadow: 0 0 0 2px rgba(98, 71, 170, 0.2);
    }
    
    /* Bot√µes */
    .button-primary {
        background-color: var(--purple);
        color: white;
        border: none;
        border-radius: 50px;
        padding: 0.6rem 1.5rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s;
        width: 100%;
        text-align: center;
        display: inline-block;
    }
    
    .button-secondary {
        background-color: #f0f0f0;
        color: var(--text-primary);
        border: 1px solid #ddd;
        border-radius: 50px;
        padding: 0.6rem 1.5rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s;
        width: 100%;
        text-align: center;
        display: inline-block;
    }
    
    .button-primary:hover {
        filter: brightness(1.1);
        box-shadow: 0 4px 10px rgba(0,0,0,0.15);
    }
    
    .button-secondary:hover {
        background-color: #e0e0e0;
    }
    
    /* Resultado e √°rea de resposta */
    .result-area {
        background-color: white;
        border-radius: 10px;
        padding: 20px;
        margin: 20px 0;
        border: 1px solid #E2E8F0;
    }
    
    /* Sidebar */
    .sidebar-content {
        padding: 20px 10px;
    }
    
    /* M√©tricas e cart√µes */
    .metric-card {
        background-color: #FFFFFF;
        border-radius: 8px;
        padding: 15px;
        margin: 10px 0;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    
    /* An√°lise de tom */
    .tone-analysis-section {
        background-color: #FFFFFF;
        border-radius: 10px;
        padding: 20px;
        margin: 20px 0;
        border: 1px solid #E2E8F0;
    }
    
    .tone-current {
        background-color: var(--background);
        padding: 10px;
        border-radius: 5px;
        margin-bottom: 10px;
    }
    
    .tone-optimized {
        background-color: #F0FFF4;
        padding: 10px;
        border-radius: 5px;
        border-left: 3px solid var(--teal);
    }

    /* Design responsivo */
    @media (max-width: 768px) {
        .header-gradient {
            padding: 1rem;
        }
        
        .feature-card {
            min-width: 100%;
        }
        
        .card-container {
            flex-direction: column;
        }
    }
    
    /* Esconder elementos default do Streamlit */
    #MainMenu {visibility: hidden;}
    footer {visibility: hidden;}
    
    /* Estilo aprimorado para o hist√≥rico */
    .history-item {
        padding: 10px;
        border-radius: 8px;
        margin-bottom: 10px;
        background-color: white;
        border: 1px solid #E2E8F0;
    }
    
    .history-item:hover {
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }
</style>
""", unsafe_allow_html=True)

# Defini√ß√£o de funcionalidades dispon√≠veis (incluindo PMBOK 7)
feature_options = {
    "Gerador de Comunica√ß√µes Estruturadas": {
        "description": "Crie e-mails profissionais, relat√≥rios de status e comunicados formais a partir de pontos-chave.",
        "icon": "üìß",
        "color": "purple",
        "subtypes": ["E-mail Profissional", "Relat√≥rio de Status", "Comunicado Formal"]
    },
    "Assistente de Reuni√µes": {
        "description": "Gere agendas detalhadas, atas de reuni√µes e mensagens de follow-up estruturadas.",
        "icon": "üìÖ",
        "color": "orange",
        "subtypes": ["Agenda de Reuni√£o", "Ata/Resumo de Reuni√£o", "Follow-up de Reuni√£o"]
    },
    "Tradutor de Jarg√£o T√©cnico": {
        "description": "Simplifique linguagem t√©cnica e adapte comunica√ß√µes para diferentes p√∫blicos.",
        "icon": "üîÑ",
        "color": "teal",
        "subtypes": ["Simplifica√ß√£o de Documento T√©cnico", "Adapta√ß√£o para Executivos", "Adapta√ß√£o para Clientes", "Adapta√ß√£o para Equipe T√©cnica"]
    },
    "Facilitador de Feedback": {
        "description": "Estruture feedback construtivo e prepare roteiros para conversas dif√≠ceis.",
        "icon": "üí¨",
        "color": "purple",
        "subtypes": ["Feedback de Desempenho", "Feedback sobre Entreg√°veis", "Roteiro para Conversa Dif√≠cil"]
    },
    "Detector de Riscos de Comunica√ß√£o": {
        "description": "Analise comunica√ß√µes para identificar ambiguidades e problemas potenciais.",
        "icon": "üîç",
        "color": "orange",
        "subtypes": ["An√°lise de E-mail", "An√°lise de Comunicado", "An√°lise de Proposta", "An√°lise de Documento de Requisitos"]
    },
    "Consultor PMBOK 7": {
        "description": "Esclare√ßa d√∫vidas e obtenha orienta√ß√µes sobre gerenciamento de projetos conforme o PMBOK 7.",
        "icon": "üìö",
        "color": "teal",
        "subtypes": ["Princ√≠pios de Gerenciamento", "Dom√≠nios de Performance", "Adapta√ß√£o de Metodologias", "Ferramentas e T√©cnicas", "Melhores Pr√°ticas"]
    }
}

# ================= SESSION STATE INITIALIZATION =================

# Inicializa√ß√£o da sess√£o
if 'api_key_configured' not in st.session_state:
    st.session_state.api_key_configured = True
    # Configurar API key automaticamente a partir dos secrets
    if st.secrets.get("OPENAI_API_KEY"):
        st.session_state.api_key = st.secrets.get("OPENAI_API_KEY")
    else:
        st.session_state.api_key = None
        st.session_state.api_key_configured = False

if 'usage_data' not in st.session_state:
    st.session_state.usage_data = []
if 'generated_content' not in st.session_state:
    st.session_state.generated_content = ""
if 'history' not in st.session_state:
    st.session_state.history = []
if 'token_count' not in st.session_state:
    st.session_state.token_count = 0
if 'request_count' not in st.session_state:
    st.session_state.request_count = 0
if 'last_request_time' not in st.session_state:
    st.session_state.last_request_time = 0
if 'session_id' not in st.session_state:
    st.session_state.session_id = datetime.now().strftime("%Y%m%d%H%M%S") + str(hash(datetime.now()))[:5]
if 'current_feature' not in st.session_state:
    st.session_state.current_feature = ""
if 'optimized_content' not in st.session_state:
    st.session_state.optimized_content = ""
if 'previous_screen' not in st.session_state:
    st.session_state.previous_screen = None

# ================= HELPER FUNCTIONS =================

def header():
    """Renderiza o cabe√ßalho com gradiente e apenas o indicador de status da API"""
    st.markdown("""
    <div class="header-gradient">
        <h1 style="margin:0; font-weight:600; font-size:32px; color:white;">NEXUS</h1>
        <div style="display: flex; align-items: center;">
            <!-- Indicador de status da API -->
            <div style="display: flex; align-items: center; gap: 8px;">
                <div style="width:8px; height:8px; border-radius:50%; background:#28C840;"></div>
                <span style="font-size:12px; color:white; opacity:0.9;">API</span>
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)

def enrich_pmbok_prompt(prompt, pmbok_topic):
    """Enriquece o prompt com informa√ß√µes relevantes do PMBOK 7 baseado no t√≥pico selecionado"""
    
    additional_info = ""
    
    if "Princ√≠pios" in pmbok_topic:
        additional_info += "\n\nPrinc√≠pios de Gerenciamento do PMBOK 7:\n"
        additional_info += "\n".join(PMBOK7_KNOWLEDGE_BASE["princ√≠pios"])
        
    elif "Dom√≠nios" in pmbok_topic:
        additional_info += "\n\nDom√≠nios de Performance do PMBOK 7:\n"
        additional_info += "\n".join(PMBOK7_KNOWLEDGE_BASE["dom√≠nios"])
        
    elif "Adapta√ß√£o" in pmbok_topic:
        additional_info += "\n\nAbordagens de Desenvolvimento no PMBOK 7:\n"
        for k, v in PMBOK7_KNOWLEDGE_BASE["metodologias"].items():
            additional_info += f"- {k.capitalize()}: {v}\n"
            
    elif "Melhores Pr√°ticas" in pmbok_topic:
        additional_info += "\n\nMudan√ßas Principais no PMBOK 7:\n"
        additional_info += "\n".join([f"- {item}" for item in PMBOK7_KNOWLEDGE_BASE["mudancas_principais"]])
    
    # Adicionar a informa√ß√£o relevante ao prompt
    enhanced_prompt = prompt + additional_info
    return enhanced_prompt

# Fun√ß√£o para exportar conte√∫do como DOCX
def export_as_docx(content, filename="documento"):
    doc = docx.Document()
    
    # Adicionar t√≠tulo
    doc.add_heading(f"{filename}", 0)
    
    # Dividir por linhas e adicionar par√°grafos
    paragraphs = content.split('\n')
    for para in paragraphs:
        if para.strip() == "":
            continue
        
        # Verificar se √© um cabe√ßalho
        if re.match(r'^#{1,6}\s+', para):
            # Extrair o n√≠vel do cabe√ßalho e o texto
            header_match = re.match(r'^(#{1,6})\s+(.*)', para)
            if header_match:
                level = min(len(header_match.group(1)), 9)  # Limitar a 9 para evitar erro
                text = header_match.group(2)
                doc.add_heading(text, level)
        else:
            doc.add_paragraph(para)
    
    # Salvar para um buffer em mem√≥ria
    buffer = BytesIO()
    doc.save(buffer)
    buffer.seek(0)
    
    return buffer

# Fun√ß√£o para gerar conte√∫do via API OpenAI
def generate_content(prompt, model="gpt-3.5-turbo", temperature=0.7):
    if not st.session_state.api_key_configured or not st.session_state.api_key:
        return "API n√£o configurada. Por favor, contate o administrador."
    
    # Verificar limites
    if st.session_state.token_count >= TOKEN_LIMIT:
        return "Voc√™ atingiu o limite de tokens para esta sess√£o. Por favor, tente novamente mais tarde."
    
    if st.session_state.request_count >= REQUEST_LIMIT:
        return "Voc√™ atingiu o limite de requisi√ß√µes para esta sess√£o. Por favor, tente novamente mais tarde."
    
    try:
        with st.spinner("Gerando conte√∫do..."):
            # Atualizar o timestamp da √∫ltima requisi√ß√£o
            st.session_state.last_request_time = time.time()
            
            # Incrementar contador de requisi√ß√µes
            st.session_state.request_count += 1
            
            # Configurar requisi√ß√£o direta √† API
            headers = {
                "Content-Type": "application/json",
                "Authorization": f"Bearer {st.session_state.api_key}"
            }
            
            # System prompt (vers√£o resumida para exemplifica√ß√£o)
            system_prompt = """
            Voc√™ √© o NEXUS, um sistema de IA especializado em comunica√ß√£o estrat√©gica e gerenciamento de projetos.
            Forne√ßa respostas profissionais, estruturadas e detalhadas, adaptadas ao contexto espec√≠fico.
            """
            
            # Adicionar mensagem do sistema e prompt do usu√°rio
            payload = {
                "model": model,
                "messages": [
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": prompt}
                ],
                "temperature": temperature,
                "max_tokens": 4000  # Aumentado para respostas mais completas
            }
            
            # Fazer a requisi√ß√£o √† API
            response = requests.post(
                "https://api.openai.com/v1/chat/completions",
                headers=headers,
                data=json.dumps(payload),
                timeout=60
            )
            
            # Processar a resposta
            if response.status_code == 200:
                result = response.json()
                content = result['choices'][0]['message']['content']
                
                # Atualizar contadores de tokens
                prompt_tokens = result['usage']['prompt_tokens']
                completion_tokens = result['usage']['completion_tokens']
                total_tokens = result['usage']['total_tokens']
                st.session_state.token_count += total_tokens
                
                # Registrar uso
                st.session_state.usage_data.append({
                    'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                    'feature': st.session_state.current_feature,
                    'tokens': total_tokens,
                    'model': model,
                    'session_id': st.session_state.session_id
                })
                
                # Adicionar ao hist√≥rico
                st.session_state.history.append({
                    'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                    'feature': st.session_state.current_feature,
                    'input': prompt[:100] + "..." if len(prompt) > 100 else prompt,  # Resumido para economizar espa√ßo
                    'output': content,
                    'model': model,
                    'session_id': st.session_state.session_id
                })
                
                return content
            else:
                return f"Erro na API (Status {response.status_code}): {response.text}"
        
    except Exception as e:
        return f"Erro ao gerar conte√∫do: {str(e)}"

  # Fun√ß√£o para criar cart√µes de funcionalidades
def create_feature_cards():
    """Cria os cart√µes de sele√ß√£o de funcionalidades na interface principal"""
    
    col1, col2 = st.columns(2)
    features_list = list(feature_options.items())
    
    # Distribuir as funcionalidades em duas colunas
    for i, (name, details) in enumerate(features_list):
        current_col = col1 if i % 2 == 0 else col2
        with current_col:
            color = details["color"]
            icon = details["icon"]
            description = details["description"]
            
            # Use um container para o estilo do cart√£o
            with st.container():
                st.markdown(f"""
                <div style="background-color: white; padding: 15px; border-radius: 10px; 
                            margin-bottom: 15px; border-left: 4px solid var(--{color});">
                    <h3 style="margin:0; color:var(--dark-purple); font-size:18px;">
                        {icon} {name}
                    </h3>
                    <p style="margin:5px 0 0 0; color:var(--text-secondary); font-size:14px;">
                        {description}
                    </p>
                </div>
                """, unsafe_allow_html=True)
                
                # Simplificar para apenas um bot√£o
                if st.button(f"Selecionar", key=f"select_{name}"):
                    st.session_state.current_feature = name
                    st.session_state.previous_screen = "home"
                    st.experimental_rerun()

# Fun√ß√£o para configurar e exibir a sidebar
def setup_sidebar():
    """Configura a barra lateral do aplicativo"""
    
    with st.sidebar:
        st.markdown('<div class="sidebar-content">', unsafe_allow_html=True)
        
        # Logo ou imagem
        st.markdown("""
        <div style="text-align:center; padding:20px 0;">
            <svg width="120" height="40">
                <defs>
                    <linearGradient id="sidebarGradient" x1="0%" y1="0%" x2="100%" y2="0%">
                        <stop offset="0%" stop-color="#6247AA"/>
                        <stop offset="50%" stop-color="#FF6D2A"/>
                        <stop offset="100%" stop-color="#00C1D5"/>
                    </linearGradient>
                </defs>
                <rect width="120" height="40" rx="5" fill="url(#sidebarGradient)"/>
                <text x="60" y="25" font-family="Arial, sans-serif" font-size="18" font-weight="bold" fill="white" text-anchor="middle">NEXUS</text>
            </svg>
            <p style="color:#86868B; margin-top:5px; font-size:12px;">Assistente de Comunica√ß√£o IA</p>
        </div>
        """, unsafe_allow_html=True)

  # Fun√ß√£o para criar cart√µes de funcionalidades
def create_feature_cards():
    """Cria os cart√µes de sele√ß√£o de funcionalidades na interface principal"""
    
    col1, col2 = st.columns(2)
    features_list = list(feature_options.items())
    
    # Distribuir as funcionalidades em duas colunas
    for i, (name, details) in enumerate(features_list):
        current_col = col1 if i % 2 == 0 else col2
        with current_col:
            color = details["color"]
            icon = details["icon"]
            description = details["description"]
            
            # Use um container para o estilo do cart√£o
            with st.container():
                st.markdown(f"""
                <div style="background-color: white; padding: 15px; border-radius: 10px; 
                            margin-bottom: 15px; border-left: 4px solid var(--{color});">
                    <h3 style="margin:0; color:var(--dark-purple); font-size:18px;">
                        {icon} {name}
                    </h3>
                    <p style="margin:5px 0 0 0; color:var(--text-secondary); font-size:14px;">
                        {description}
                    </p>
                </div>
                """, unsafe_allow_html=True)
                
                # Simplificar para apenas um bot√£o
                if st.button(f"Selecionar", key=f"select_{name}"):
                    st.session_state.current_feature = name
                    st.session_state.previous_screen = "home"
                    st.experimental_rerun()

# Fun√ß√£o para configurar e exibir a sidebar
def setup_sidebar():
    """Configura a barra lateral do aplicativo"""
    
    with st.sidebar:
        st.markdown('<div class="sidebar-content">', unsafe_allow_html=True)
        
        # Logo ou imagem
        st.markdown("""
        <div style="text-align:center; padding:20px 0;">
            <svg width="120" height="40">
                <defs>
                    <linearGradient id="sidebarGradient" x1="0%" y1="0%" x2="100%" y2="0%">
                        <stop offset="0%" stop-color="#6247AA"/>
                        <stop offset="50%" stop-color="#FF6D2A"/>
                        <stop offset="100%" stop-color="#00C1D5"/>
                    </linearGradient>
                </defs>
                <rect width="120" height="40" rx="5" fill="url(#sidebarGradient)"/>
                <text x="60" y="25" font-family="Arial, sans-serif" font-size="18" font-weight="bold" fill="white" text-anchor="middle">NEXUS</text>
            </svg>
            <p style="color:#86868B; margin-top:5px; font-size:12px;">Assistente de Comunica√ß√£o IA</p>
        </div>
        """, unsafe_allow_html=True)

 # Interface principal do aplicativo
def main():
    # Renderizar o cabe√ßalho com gradiente
    header()
    
    # Configurar a sidebar
    setup_sidebar()
    
    # Exibir mensagem sobre vers√£o aprimorada
    with st.expander("‚ÑπÔ∏è Sobre esta vers√£o", expanded=False):
        st.markdown(f"""
        **Vers√£o NEXUS Aprimorada**
        Esta vers√£o possui interface moderna e limites expandidos:
        * At√© {REQUEST_LIMIT} requisi√ß√µes por sess√£o
        * At√© {TOKEN_LIMIT} tokens por sess√£o
        * Design responsivo para todos os dispositivos
        * An√°lise avan√ßada de tom comunicacional
        """)
    
    # Bot√£o VOLTAR quando estiver em uma funcionalidade
    if st.session_state.current_feature:
        if st.button("‚óÄÔ∏è VOLTAR", key="back_to_home"):
            st.session_state.current_feature = ""
            st.session_state.previous_screen = None
            st.experimental_rerun()
    
    # Hist√≥rico de gera√ß√µes recentes
    if st.session_state.history:
        with st.expander("Hist√≥rico de Gera√ß√µes Recentes", expanded=False):
            for i, item in enumerate(reversed(st.session_state.history[-5:])):  # 5 itens mais recentes
                st.markdown(f"""
                <div class="history-item">
                    <p><strong>{item['timestamp']} - {item['feature']}</strong></p>
                </div>
                """, unsafe_allow_html=True)
                if st.button(f"Carregar este conte√∫do ‚Ü©Ô∏è", key=f"load_{i}"):
                    st.session_state.current_feature = item['feature']
                    st.session_state.generated_content = item['output']
                    st.experimental_rerun()
                st.markdown("---")
    
    # Se nenhuma funcionalidade selecionada, mostrar as op√ß√µes
    if not st.session_state.current_feature:
        st.markdown("## Selecione uma funcionalidade")
        create_feature_cards()
    else:
        # Interface espec√≠fica da funcionalidade selecionada
        current_feature = st.session_state.current_feature
        feature_details = feature_options[current_feature]
        
        # T√≠tulo da funcionalidade
        st.markdown(f"## {feature_details['icon']} {current_feature}")
        
        # Verificar limites antes de mostrar a interface
        if st.session_state.token_count >= TOKEN_LIMIT:
            st.error(f"Voc√™ atingiu o limite de {TOKEN_LIMIT} tokens para esta sess√£o. Por favor, tente novamente mais tarde.")
        elif st.session_state.request_count >= REQUEST_LIMIT:
            st.error(f"Voc√™ atingiu o limite de {REQUEST_LIMIT} requisi√ß√µes para esta sess√£o. Por favor, tente novamente mais tarde.")
        else:
            # Interface espec√≠fica da funcionalidade
            with st.form(key=f"{current_feature}_form"):
                st.markdown(f'<div class="form-container">', unsafe_allow_html=True)
                st.markdown(f'<p class="form-title">{feature_details["description"]}</p>', unsafe_allow_html=True)
                
                # Campo de subtipo
                subtype = st.selectbox("Tipo de Comunica√ß√£o", feature_details['subtypes'])
                
                # Campos comuns a todas as funcionalidades (exceto PMBOK que tem campos espec√≠ficos)
                context = ""
                if current_feature != "Consultor PMBOK 7":
                    context = st.text_area("Contexto do Projeto", 
                                        help="Descreva o projeto, fase atual e informa√ß√µes relevantes",
                                        height=100,
                                        placeholder="Ex: Projeto de desenvolvimento do aplicativo mobile, fase de testes")
                
                # Campos espec√≠ficos por funcionalidade
                prompt = ""
                
                if current_feature == "Gerador de Comunica√ß√µes Estruturadas":
                    audience = st.text_input("P√∫blico-alvo", 
                                        help="Para quem esta comunica√ß√£o ser√° enviada (equipe, cliente, stakeholder)",
                                        placeholder="Ex: Cliente, diretor de marketing da empresa XYZ")
                    key_points = st.text_area("Pontos-chave", 
                                            help="Liste os principais pontos que devem ser inclu√≠dos na comunica√ß√£o",
                                            height=150,
                                            placeholder="Ex: Atraso de 3 dias devido a bugs na integra√ß√£o; Plano de recupera√ß√£o com recursos adicionais")
                    tone = st.select_slider("Tom da Comunica√ß√£o", 
                                        options=["Muito Formal", "Formal", "Neutro", "Amig√°vel", "Casual"],
                                        value="Neutro")
                    
                    prompt = f"""
                    Gere um {subtype} com base nas seguintes informa√ß√µes:
                    
                    Contexto do Projeto: {context}
                    P√∫blico-alvo: {audience}
                    Pontos-chave: {key_points}
                    Tom desejado: {tone}
                    
                    Formate a sa√≠da adequadamente para um {subtype}, incluindo assunto/t√≠tulo e estrutura apropriada.
                    """
                
                elif current_feature == "Assistente de Reuni√µes":
                    participants = st.text_area("Participantes", 
                                            help="Liste os participantes e suas fun√ß√µes",
                                            height=100,
                                            placeholder="Ex: Jo√£o Silva (Gerente de Projeto), Maria Costa (Desenvolvedora Frontend)")
                    topics = st.text_area("T√≥picos a serem abordados", 
                                        help="Liste os t√≥picos que precisam ser discutidos",
                                        height=150,
                                        placeholder="Ex: Atualiza√ß√£o do cronograma, Bugs pendentes, Feedback do cliente")
                    duration = st.number_input("Dura√ß√£o (minutos)", min_value=15, max_value=240, value=60, step=15)
                    
                    if subtype == "Agenda de Reuni√£o":
                        prompt = f"""
                        Crie uma agenda detalhada para uma reuni√£o de {duration} minutos com base nas seguintes informa√ß√µes:
                        
                        Contexto do Projeto: {context}
                        Participantes: {participants}
                        T√≥picos a serem abordados: {topics}
                        
                        Inclua aloca√ß√£o de tempo para cada item, respons√°veis e objetivos claros.
                        """
                    elif subtype == "Ata/Resumo de Reuni√£o":
                        decisions = st.text_area("Decis√µes tomadas", 
                                            help="Liste as principais decis√µes tomadas durante a reuni√£o",
                                            height=100,
                                            placeholder="Ex: Aprova√ß√£o do novo design, Extens√£o do prazo em 1 semana")
                        actions = st.text_area("A√ß√µes acordadas", 
                                            help="Liste as a√ß√µes acordadas, respons√°veis e prazos",
                                            height=100,
                                            placeholder="Ex: Jo√£o ir√° corrigir o bug #123 at√© amanh√£, Maria criar√° novos componentes at√© sexta")
                        
                        prompt = f"""
                        Crie uma ata/resumo detalhado para uma reuni√£o de {duration} minutos com base nas seguintes informa√ß√µes:
                        
                        Contexto do Projeto: {context}
                        Participantes: {participants}
                        T√≥picos abordados: {topics}
                        Decis√µes tomadas: {decisions}
                        A√ß√µes acordadas: {actions}
                        
                        Organize por t√≥picos, destacando claramente decis√µes e pr√≥ximos passos com respons√°veis.
                        """
                    else:  # Follow-up
                        meeting_outcome = st.text_area("Resultado da reuni√£o", 
                                                help="Resuma os principais resultados da reuni√£o",
                                                height=100,
                                                placeholder="Ex: Definidas as prioridades para o pr√≥ximo sprint e resolvidos os bloqueios atuais")
                        action_items = st.text_area("Itens de a√ß√£o", 
                                                help="Liste os itens de a√ß√£o, respons√°veis e prazos",
                                                height=100,
                                                placeholder="Ex: Jo√£o: revis√£o de c√≥digo at√© 25/03; Maria: implementa√ß√£o da nova feature at√© 27/03")
                        
                        prompt = f"""
                        Crie uma mensagem de follow-up para uma reuni√£o com base nas seguintes informa√ß√µes:
                        
                        Contexto do Projeto: {context}
                        Participantes: {participants}
                        T√≥picos abordados: {topics}
                        Resultado da reuni√£o: {meeting_outcome}
                        Itens de a√ß√£o: {action_items}
                        
                        A mensagem deve agradecer a participa√ß√£o, resumir os principais pontos, detalhar pr√≥ximos passos
                        com respons√°veis e prazos, e solicitar confirma√ß√£o/feedback conforme apropriado.
                        """
                        
                elif current_feature == "Tradutor de Jarg√£o T√©cnico":
                    technical_content = st.text_area("Conte√∫do T√©cnico", 
                                                help="Cole aqui o texto t√©cnico que precisa ser traduzido",
                                                height=200,
                                                placeholder="Ex: A implementa√ß√£o do Redux utiliza reducers imut√°veis para gerenciar o estado global da aplica√ß√£o...")
                    audience = st.selectbox("P√∫blico-alvo", 
                                        ["Executivos", "Clientes n√£o-t√©cnicos", "Equipe de Neg√≥cios", "Equipe T√©cnica Junior"])
                    key_concepts = st.text_input("Conceitos-chave a preservar", 
                                            help="Liste conceitos t√©cnicos que devem ser mantidos mesmo se simplificados",
                                            placeholder="Ex: gerenciamento de estado, API, front-end")
                    
                    prompt = f"""
                    Traduza/adapte o seguinte conte√∫do t√©cnico para um p√∫blico de {audience} com base nas seguintes informa√ß√µes:
                    
                    Contexto do Projeto: {context}
                    Conte√∫do T√©cnico Original: {technical_content}
                    Conceitos-chave a preservar: {key_concepts}
                    
                    Para {audience}, foque em: 
                    - {'Impacto nos neg√≥cios e resultados de alto n√≠vel' if audience == 'Executivos' else ''}
                    - {'Benef√≠cios e funcionalidades em linguagem acess√≠vel' if audience == 'Clientes n√£o-t√©cnicos' else ''}
                    - {'Conex√£o com objetivos de neg√≥cios e processos' if audience == 'Equipe de Neg√≥cios' else ''}
                    - {'Explica√ß√µes t√©cnicas mais detalhadas, mas com conceitos explicados' if audience == 'Equipe T√©cnica Junior' else ''}
                    
                    Mantenha a precis√£o conceitual mesmo simplificando a linguagem.
                    Forne√ßa uma explica√ß√£o completa e detalhada, com exemplos e analogias apropriadas para o p√∫blico.
                    """
                
                elif current_feature == "Facilitador de Feedback":
                    situation = st.text_area("Situa√ß√£o", 
                                        help="Descreva a situa√ß√£o espec√≠fica para a qual voc√™ precisa fornecer feedback",
                                        height=150,
                                        placeholder="Ex: Atraso na entrega de componentes para o projeto principal...")
                    strengths = st.text_area("Pontos Fortes", 
                                        help="Liste aspectos positivos que devem ser destacados",
                                        height=100,
                                        placeholder="Ex: Qualidade do c√≥digo entregue, comunica√ß√£o proativa de desafios")
                    areas_for_improvement = st.text_area("√Åreas para Melhoria", 
                                                    help="Liste aspectos que precisam ser melhorados",
                                                    height=100,
                                                    placeholder="Ex: Estimativas de tempo irrealistas, falha em pedir ajuda quando bloqueado")
                    relationship = st.selectbox("Rela√ß√£o com o Receptor", 
                                            ["Membro da equipe direto", "Colega de mesmo n√≠vel", "Superior hier√°rquico", "Cliente", "Fornecedor"])
                    
                    prompt = f"""
                    Estruture um {subtype} construtivo e eficaz com base nas seguintes informa√ß√µes:
                    
                    Contexto do Projeto: {context}
                    Situa√ß√£o espec√≠fica: {situation}
                    Pontos fortes a destacar: {strengths}
                    √Åreas para melhoria: {areas_for_improvement}
                    Rela√ß√£o com o receptor: {relationship}
                    
                    O feedback deve:
                    - Ser espec√≠fico e baseado em comportamentos observ√°veis
                    - Equilibrar aspectos positivos e √°reas de melhoria
                    - Incluir exemplos concretos
                    - Oferecer sugest√µes acion√°veis
                    - Usar tom apropriado para a rela√ß√£o ({relationship})
                    - Focar em crescimento e desenvolvimento, n√£o em cr√≠tica
                    
                    Formate como um roteiro/script detalhado que o usu√°rio pode seguir na conversa ou adaptar para uma comunica√ß√£o escrita.
                    Adicione observa√ß√µes e dicas de comunica√ß√£o n√£o-verbal quando relevante.
                    """
                
                elif current_feature == "Detector de Riscos de Comunica√ß√£o":
                    content_to_analyze = st.text_area("Conte√∫do para An√°lise", 
                                                    help="Cole aqui o texto que voc√™ deseja analisar quanto a riscos de comunica√ß√£o",
                                                    height=200,
                                                    placeholder="Ex: Devido a circunst√¢ncias imprevistas no desenvolvimento, alguns recursos podem sofrer atrasos...")
                    audience = st.text_input("P√∫blico-alvo", 
                                        help="Descreva quem receber√° esta comunica√ß√£o",
                                        placeholder="Ex: Cliente executivo com pouco conhecimento t√©cnico")
                    stakes = st.select_slider("Import√¢ncia da Comunica√ß√£o", 
                                            options=["Baixa", "M√©dia", "Alta", "Cr√≠tica"],
                                            value="M√©dia")
                    
                    prompt = f"""
                    Analise o seguinte {subtype} quanto a riscos de comunica√ß√£o:
                    
                    Contexto do Projeto: {context}
                    P√∫blico-alvo: {audience}
                    Import√¢ncia da comunica√ß√£o: {stakes}
                    
                    Conte√∫do para an√°lise:
                    ---
                    {content_to_analyze}
                    ---
                    
                    Sua an√°lise deve:
                    1. Identificar ambiguidades, informa√ß√µes incompletas ou confusas
                    2. Apontar poss√≠veis mal-entendidos baseados no p√∫blico-alvo
                    3. Detectar problemas de tom ou linguagem inapropriada
                    4. Identificar informa√ß√µes sens√≠veis ou potencialmente problem√°ticas
                    5. Sugerir reformula√ß√µes espec√≠ficas para cada problema identificado
                    6. Analisar a estrutura geral e propor melhorias organizacionais
                    7. Verificar se h√° informa√ß√µes cr√≠ticas ausentes
                    
                    Organize sua an√°lise em forma de tabela com colunas para: Trecho problem√°tico, Risco potencial, Sugest√£o de melhoria.
                    Ao final, forne√ßa uma avalia√ß√£o geral dos riscos de comunica√ß√£o (Baixo/M√©dio/Alto) e um resumo das principais recomenda√ß√µes.
                    Forne√ßa tamb√©m uma vers√£o revisada completa do texto.
                    """
                
                elif current_feature == "Consultor PMBOK 7":
                    pmbok_topic = subtype  # J√° definido pelo selectbox de subtypes
                    
                    project_context = st.text_area("Contexto do Projeto", 
                                            help="Descreva brevemente o projeto ou a situa√ß√£o para contextualizar sua d√∫vida",
                                            height=100,
                                            placeholder="Ex: Estamos iniciando um projeto de desenvolvimento de software com metodologia h√≠brida...")
                    
                    specific_question = st.text_area("Sua D√∫vida Espec√≠fica", 
                                                help="Detalhe sua d√∫vida ou o que voc√™ precisa saber sobre o tema selecionado",
                                                height=150,
                                                placeholder="Ex: Como aplicar os princ√≠pios de valor do PMBOK 7 em um ambiente que tradicionalmente usava metodologias em cascata?")
                    
                    experience_level = st.select_slider("Seu N√≠vel de Experi√™ncia", 
                                                    options=["Iniciante", "Intermedi√°rio", "Avan√ßado", "Especialista"],
                                                    value="Intermedi√°rio")
                    
                    organization_context = st.text_input("Contexto Organizacional", 
                                                    help="Descreva brevemente o contexto organizacional (opcional)",
                                                    placeholder="Ex: Empresa de m√©dio porte do setor financeiro com cultura tradicional")
                    
                    base_prompt = f"""
                    Forne√ßa uma orienta√ß√£o detalhada sobre o tema "{pmbok_topic}" do PMBOK 7 com base nas seguintes informa√ß√µes:
                    
                    Contexto do Projeto: {project_context}
                    D√∫vida Espec√≠fica: {specific_question}
                    N√≠vel de Experi√™ncia do Usu√°rio: {experience_level}
                    Contexto Organizacional: {organization_context}
                    
                    Sua resposta deve:
                    1. Explicar os conceitos relevantes do PMBOK 7 relacionados √† d√∫vida
                    2. Fornecer orienta√ß√µes pr√°ticas adaptadas ao contexto espec√≠fico
                    3. Apresentar exemplos concretos de aplica√ß√£o
                    4. Destacar boas pr√°ticas e recomenda√ß√µes
                    5. Considerar o n√≠vel de experi√™ncia do usu√°rio ({experience_level})
                    6. Fazer conex√µes com outros dom√≠nios ou princ√≠pios relevantes do PMBOK 7
                    7. Incluir dicas de implementa√ß√£o pr√°tica
                    8. Mencionar poss√≠veis desafios e como super√°-los
                    
                    Formate a resposta de maneira estruturada, com se√ß√µes claras e, se apropriado, inclua refer√™ncias aos elementos espec√≠ficos do PMBOK 7.
                    """
                    
                    # Enriquecemos o prompt com informa√ß√µes relevantes do PMBOK 7
                    prompt = enrich_pmbok_prompt(base_prompt, pmbok_topic)
                
                st.markdown('</div>', unsafe_allow_html=True)
                
                # Substituir os tr√™s bot√µes por um √∫nico bot√£o GERAR
                st.markdown('<div class="button-primary">GERAR</div>', unsafe_allow_html=True)
                submit_button = st.form_submit_button("GERAR", type="primary")

# Processamento ap√≥s o envio do formul√°rio
            if submit_button:
                if not st.session_state.api_key_configured:
                    st.error("API n√£o configurada. Por favor, contate o administrador.")
                elif st.session_state.token_count >= TOKEN_LIMIT:
                    st.error(f"Voc√™ atingiu o limite de {TOKEN_LIMIT} tokens para esta sess√£o.")
                elif st.session_state.request_count >= REQUEST_LIMIT:
                    st.error(f"Voc√™ atingiu o limite de {REQUEST_LIMIT} requisi√ß√µes para esta sess√£o.")
                else:
                    # Gerar conte√∫do
                    generated_content = generate_content(prompt, model="gpt-3.5-turbo", temperature=0.7)
                    st.session_state.generated_content = generated_content
                    
                    # Exibir resultado
                    st.markdown("### Resultado")
                    st.markdown('<div class="result-area">', unsafe_allow_html=True)
                    st.markdown(generated_content)
                    st.markdown('</div>', unsafe_allow_html=True)
                    
                    # Adicionar bot√£o VOLTAR ap√≥s exibir o resultado
                    col1, col2 = st.columns([1, 3])
                    with col1:
                        if st.button("‚óÄÔ∏è VOLTAR", key="back_from_result"):
                            # Manter o current_feature, apenas limpar o resultado
                            st.session_state.generated_content = ""
                            st.experimental_rerun()
                    
                    # Op√ß√µes de download
                    col1, col2 = st.columns(2)
                    with col1:
                        # Download como texto
                        st.download_button(
                            label="üìÑ Baixar como TXT",
                            data=generated_content,
                            file_name=f"{current_feature.lower().replace(' ', '_')}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                            mime="text/plain"
                        )
                    
                    with col2:
                        # Download como DOCX
                        docx_buffer = export_as_docx(generated_content)
                        st.download_button(
                            label="üìù Baixar como DOCX",
                            data=docx_buffer,
                            file_name=f"{current_feature.lower().replace(' ', '_')}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.docx",
                            mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                        )
                    
                    # Comentando a parte de an√°lise de tom, j√° que voc√™ decidiu n√£o incluir por enquanto
                    # # An√°lise de Tom (para todos os tipos de conte√∫do exceto PMBOK)
                    # if current_feature != "Consultor PMBOK 7":
                    #     create_tone_analysis_section(generated_content)
                    
                    # Feedback sobre o resultado
                    st.markdown("### Este resultado foi √∫til?")
                    col1, col2 = st.columns(2)
                    with col1:
                        if st.button("üëç Sim, foi √∫til"):
                            st.success("Obrigado pelo feedback positivo!")
                    
                    with col2:
                        if st.button("üëé N√£o, preciso de melhoria"):
                            st.error("Lamentamos que n√£o tenha atendido suas expectativas. Por favor, forne√ßa detalhes no campo de feedback na barra lateral para podermos melhorar.")
# An√°lise de Tom (para todos os tipos de conte√∫do exceto PMBOK)
                                        
                    # Feedback sobre o resultado
                    st.markdown("### Este resultado foi √∫til?")
                    col1, col2 = st.columns(2)
                    with col1:
                        if st.button("üëç Sim, foi √∫til"):
                            st.success("Obrigado pelo feedback positivo!")
                    
                    with col2:
                        if st.button("üëé N√£o, preciso de melhoria"):
                            st.error("Lamentamos que n√£o tenha atendido suas expectativas. Por favor, forne√ßa detalhes no campo de feedback na barra lateral para podermos melhorar.")

# Iniciar a aplica√ß√£o
if __name__ == "__main__":
    main()
