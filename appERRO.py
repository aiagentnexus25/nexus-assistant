import streamlit as st
import requests
import json
import pandas as pd
from datetime import datetime
import plotly.express as px
import os
import re
import docx
from io import BytesIO
import time
import functools

# ================= CONFIGURATION =================

# Configura√ß√£o da p√°gina - otimizado para mobile e desktop
st.set_page_config(
    page_title="NEXUS",
    page_icon="üìã",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Definindo paleta de cores - simplificada e mais Apple-like
NEXUS_COLORS = {
    "primary": "#007AFF",       # Apple blue
    "secondary": "#5E5CE6",     # purple
    "accent": "#FF9500",        # orange
    "background": "#F5F5F7",    # light gray
    "card": "#FFFFFF",          # white
    "text_primary": "#1D1D1F",  # nearly black
    "text_secondary": "#86868B", # medium gray
    "success": "#34C759",       # green
    "warning": "#FF3B30",       # red
    "border": "#E5E5EA"         # light border
}

# Esconder elementos padr√£o do Streamlit e fazer o app ocupar toda largura
st.markdown("""
<style>
    /* Ocultar elementos Streamlit desnecess√°rios */
    #MainMenu, footer, header {visibility: hidden;}
    [data-testid="collapsedControl"] {display: none;}
    section[data-testid="stSidebar"] {display: none;}
    
    /* Otimiza√ß√£o para mobile */
    .main .block-container {
        padding-left: 1rem;
        padding-right: 1rem;
        max-width: 960px;
        margin: 0 auto;
    }
    
    /* Tipografia mais clara - estilo Apple */
    body {
        font-family: 'SF Pro Text', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        -webkit-font-smoothing: antialiased;
        color: #1D1D1F;
    }
    
    h1, h2, h3, h4, h5 {
        font-weight: 600;
    }
    
    /* Espa√ßamento e tamanho responsivos */
    @media (max-width: 640px) {
        .main .block-container {
            padding: 0.5rem;
        }
        
        .header-container h1 {
            font-size: 24px;
        }
        
        .feature-card {
            padding: 0.8rem;
        }
    }
</style>
""", unsafe_allow_html=True)

# CSS Aprimorado - Mais limpo, moderno e inspirado em design Apple
st.markdown("""
<style>
    /* Vari√°veis de cores */
    :root {
        --primary: #007AFF;
        --secondary: #5E5CE6;
        --accent: #FF9500;
        --background: #F5F5F7;
        --card: #FFFFFF;
        --text-primary: #1D1D1F;
        --text-secondary: #86868B;
        --success: #34C759;
        --warning: #FF3B30;
        --border: #E5E5EA;
    }
    
    /* Reset e estilos gerais */
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }
    
    /* Corpo principal */
    .main {
        background-color: var(--background);
        padding: 1rem;
    }
    
    .stApp {
        background-color: var(--background);
    }
    
    /* Header redesenhado - mais Apple-like */
    .header-container {
        background-color: var(--card);
        border-radius: 12px;
        padding: 1.2rem 1.5rem;
        margin-bottom: 1.5rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
        box-shadow: 0 1px 2px rgba(0,0,0,0.05);
        border: 1px solid var(--border);
    }
    
    .header-container h1 {
        margin: 0;
        color: var(--text-primary);
        font-size: 28px;
        font-weight: 600;
    }
    
    .header-status {
        display: flex;
        align-items: center;
        gap: 8px;
    }
    
    .status-indicator {
        width: 8px;
        height: 8px;
        border-radius: 50%;
    }
    
    .status-active {
        background-color: var(--success);
    }
    
    /* Cards de funcionalidades - redesenhados */
    .feature-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
        gap: 1rem;
        margin-bottom: 1.5rem;
    }
    
    .feature-card {
        background-color: var(--card);
        border-radius: 12px;
        padding: 1.2rem;
        transition: all 0.2s ease;
        box-shadow: 0 1px 2px rgba(0,0,0,0.05);
        border: 1px solid var(--border);
        height: 100%;
        display: flex;
        flex-direction: column;
    }
    
    .feature-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0,0,0,0.08);
    }
    
    .feature-card h3 {
        margin: 0;
        color: var(--text-primary);
        font-size: 18px;
        font-weight: 600;
        margin-bottom: 8px;
    }
    
    .feature-card p {
        color: var(--text-secondary);
        font-size: 14px;
        line-height: 1.4;
        margin-bottom: 1rem;
        flex-grow: 1;
    }
    
    .feature-card .feature-icon {
        font-size: 24px;
        margin-bottom: 12px;
    }
    
    /* Formul√°rios - redesenhados para maior clareza */
    .form-container {
        background-color: var(--card);
        border-radius: 12px;
        padding: 1.5rem;
        margin-bottom: 1.5rem;
        border: 1px solid var(--border);
    }
    
    .form-title {
        font-size: 18px;
        color: var(--text-primary);
        margin-bottom: 1.2rem;
        font-weight: 600;
    }
    
    /* Campos de entrada - estilo Apple */
    .stTextInput > div > div > input {
        border-radius: 8px;
        border: 1px solid var(--border);
        padding: 12px 16px;
        font-size: 15px;
        background-color: rgba(245, 245, 247, 0.5);
        transition: all 0.2s;
    }
    
    .stTextInput > div > div > input:focus {
        border-color: var(--primary);
        box-shadow: 0 0 0 2px rgba(0, 122, 255, 0.15);
        background-color: white;
    }
    
    .stTextArea > div > div > textarea {
        border-radius: 8px;
        border: 1px solid var(--border);
        padding: 12px 16px;
        font-size: 15px;
        background-color: rgba(245, 245, 247, 0.5);
        transition: all 0.2s;
    }
    
    .stTextArea > div > div > textarea:focus {
        border-color: var(--primary);
        box-shadow: 0 0 0 2px rgba(0, 122, 255, 0.15);
        background-color: white;
    }
    
    /* Bot√µes - estilo Apple */
    .button-primary {
        background-color: var(--primary);
        color: white;
        border: none;
        border-radius: 8px;
        padding: 12px 24px;
        font-weight: 500;
        font-size: 15px;
        cursor: pointer;
        transition: all 0.2s;
        width: 100%;
        text-align: center;
        display: inline-block;
    }
    
    .button-secondary {
        background-color: rgba(0, 122, 255, 0.1);
        color: var(--primary);
        border: none;
        border-radius: 8px;
        padding: 12px 24px;
        font-weight: 500;
        font-size: 15px;
        cursor: pointer;
        transition: all 0.2s;
        width: 100%;
        text-align: center;
        display: inline-block;
    }
    
    .button-primary:hover {
        background-color: #0062CC;
    }
    
    .button-secondary:hover {
        background-color: rgba(0, 122, 255, 0.15);
    }
    
    /* Resultado */
    .result-area {
        background-color: var(--card);
        border-radius: 12px;
        padding: 1.5rem;
        margin: 1.5rem 0;
        border: 1px solid var(--border);
    }
    
    /* Hist√≥rico - redesenhado */
    .history-item {
        padding: 1rem;
        border-radius: 8px;
        margin-bottom: 0.8rem;
        background-color: var(--card);
        border: 1px solid var(--border);
        transition: all 0.2s;
    }
    
    .history-item:hover {
        box-shadow: 0 2px 8px rgba(0,0,0,0.08);
    }
    
    /* Responsividade aprimorada */
    @media (max-width: 768px) {
        .feature-grid {
            grid-template-columns: 1fr;
        }
        
        .form-container, .result-area {
            padding: 1rem;
        }
        
        .button-primary, .button-secondary {
            padding: 10px 16px;
            font-size: 14px;
        }
    }
</style>
""", unsafe_allow_html=True)

# Base de conhecimento sobre PMBOK 7 - mantida como um m√≥dulo separado com lazy loading
@functools.lru_cache(maxsize=1)
def get_pmbok_knowledge():
    return {
        "princ√≠pios": [
            "1. Ser um administrador diligente, respeitoso e cuidadoso",
            "2. Criar um ambiente colaborativo da equipe do projeto",
            "3. Envolver efetivamente as partes interessadas",
            "4. Focar no valor",
            "5. Reconhecer, avaliar e responder √†s intera√ß√µes do sistema",
            "6. Demonstrar comportamentos de lideran√ßa",
            "7. Adaptar com base no contexto",
            "8. Incorporar qualidade nos processos e resultados",
            "9. Navegar na complexidade",
            "10. Otimizar respostas a riscos",
            "11. Abra√ßar adaptabilidade e resili√™ncia",
            "12. Permitir mudan√ßa para alcan√ßar o estado futuro previsto"
        ],
        
        "dom√≠nios": [
            "1. Stakeholders (Partes Interessadas)",
            "2. Team (Equipe)",
            "3. Development Approach and Life Cycle (Abordagem de Desenvolvimento e Ciclo de Vida)",
            "4. Planning (Planejamento)",
            "5. Project Work (Trabalho do Projeto)",
            "6. Delivery (Entrega)",
            "7. Measurement (Mensura√ß√£o)",
            "8. Uncertainty (Incerteza)"
        ],
        
        "metodologias": {
            "preditiva": "Abordagem tradicional (cascata) com fases sequenciais",
            "adaptativa": "Abordagens √°geis e iterativas (Scrum, Kanban, etc.)",
            "h√≠brida": "Combina√ß√£o de elementos preditivos e adaptativos"
        },
        
        "mudancas_principais": [
            "1. Transi√ß√£o de processos para princ√≠pios e dom√≠nios de performance",
            "2. Foco em entrega de valor em vez de apenas escopo, tempo e custo",
            "3. Maior √™nfase em adaptabilidade e contexto",
            "4. Abordagem de sistemas em vez de processos isolados",
            "5. Reconhecimento de m√∫ltiplas abordagens (adaptativa, preditiva, h√≠brida)",
            "6. Maior √™nfase na lideran√ßa e soft skills",
            "7. Vis√£o hol√≠stica do gerenciamento de projetos"
        ]
    }

# Defini√ß√£o de funcionalidades dispon√≠veis - refatorado para mais efici√™ncia
FEATURE_OPTIONS = {
    "Gerador de Comunica√ß√µes": {
        "description": "Crie e-mails, relat√≥rios e comunicados profissionais",
        "icon": "üìß",
        "color": "primary",
        "subtypes": ["E-mail Profissional", "Relat√≥rio de Status", "Comunicado Formal"]
    },
    "Assistente de Reuni√µes": {
        "description": "Gere agendas, atas e follow-ups estruturados",
        "icon": "üìÖ",
        "color": "secondary",
        "subtypes": ["Agenda de Reuni√£o", "Ata de Reuni√£o", "Follow-up de Reuni√£o"]
    },
    "Tradutor de Jarg√£o": {
        "description": "Simplifique linguagem t√©cnica para diferentes p√∫blicos",
        "icon": "üîÑ",
        "color": "accent",
        "subtypes": ["Simplifica√ß√£o T√©cnica", "Adapta√ß√£o para Executivos", "Adapta√ß√£o para Clientes", "Adapta√ß√£o para Equipe T√©cnica"]
    },
    "Facilitador de Feedback": {
        "description": "Estruture feedbacks construtivos e conversas dif√≠ceis",
        "icon": "üí¨",
        "color": "primary",
        "subtypes": ["Feedback de Desempenho", "Feedback sobre Entreg√°veis", "Roteiro para Conversa"]
    },
    "Detector de Riscos": {
        "description": "Identifique ambiguidades e problemas potenciais",
        "icon": "üîç",
        "color": "secondary",
        "subtypes": ["An√°lise de E-mail", "An√°lise de Comunicado", "An√°lise de Proposta", "An√°lise de Requisitos"]
    },
    "Consultor PMBOK 7": {
        "description": "Obtenha orienta√ß√µes sobre gerenciamento de projetos",
        "icon": "üìö",
        "color": "accent",
        "subtypes": ["Princ√≠pios", "Dom√≠nios", "Metodologias", "Ferramentas", "Melhores Pr√°ticas"]
    }
}

# Limites do sistema - mais realistas para evitar problemas de desempenho
TOKEN_LIMIT = 50000     # Reduzido para evitar sobrecarga
REQUEST_LIMIT = 30      # Valor mais realista baseado em uso t√≠pico

# ================= SESSION STATE INITIALIZATION =================

# Inicializa√ß√£o da sess√£o otimizada - usando fun√ß√µes auxiliares
def init_session_state():
    """Inicializa todas as vari√°veis do session_state de uma vez"""
    
    # Vari√°veis b√°sicas
    defaults = {
        'api_key_configured': True,
        'usage_data': [],
        'generated_content': "",
        'history': [],
        'token_count': 0,
        'request_count': 0,
        'last_request_time': 0,
        'session_id': datetime.now().strftime("%Y%m%d%H%M%S") + str(hash(datetime.now()))[:5],
        'current_feature': "",
        'optimized_content': "",
        'previous_screen': None
    }
    
    # Aplicar apenas valores ausentes
    for key, value in defaults.items():
        if key not in st.session_state:
            st.session_state[key] = value
    
    # Configurar API key automaticamente a partir dos secrets
    if 'api_key' not in st.session_state:
        if st.secrets.get("OPENAI_API_KEY"):
            st.session_state.api_key = st.secrets.get("OPENAI_API_KEY")
        else:
            st.session_state.api_key = None
            st.session_state.api_key_configured = False

# Inicializar o session state ao carregar o app
init_session_state()

# ================= HELPER FUNCTIONS =================

def header():
    """Renderiza o cabe√ßalho com design minimalista estilo Apple"""
    
    st.markdown("""
    <div class="header-container">
        <h1>NEXUS</h1>
        <div class="header-status">
            <div class="status-indicator status-active"></div>
            <span style="font-size:14px; color:var(--text-secondary);">Conectado</span>
        </div>
    </div>
    """, unsafe_allow_html=True)

def enrich_pmbok_prompt(prompt, pmbok_topic):
    """Enriquece o prompt com informa√ß√µes relevantes do PMBOK 7 baseado no t√≥pico selecionado"""
    
    pmbok_data = get_pmbok_knowledge()  # Lazy loading com cache
    additional_info = ""
    
    if "Princ√≠pios" in pmbok_topic:
        additional_info += "\n\nPrinc√≠pios de Gerenciamento do PMBOK 7:\n"
        additional_info += "\n".join(pmbok_data["princ√≠pios"])
        
    elif "Dom√≠nios" in pmbok_topic:
        additional_info += "\n\nDom√≠nios de Performance do PMBOK 7:\n"
        additional_info += "\n".join(pmbok_data["dom√≠nios"])
        
    elif "Metodologias" in pmbok_topic:
        additional_info += "\n\nAbordagens de Desenvolvimento no PMBOK 7:\n"
        for k, v in pmbok_data["metodologias"].items():
            additional_info += f"- {k.capitalize()}: {v}\n"
            
    elif "Melhores Pr√°ticas" in pmbok_topic:
        additional_info += "\n\nMudan√ßas Principais no PMBOK 7:\n"
        additional_info += "\n".join([f"- {item}" for item in pmbok_data["mudancas_principais"]])
    
    # Adicionar a informa√ß√£o relevante ao prompt
    return prompt + additional_info

# Fun√ß√£o para exportar conte√∫do como DOCX - otimizada
@st.cache_data  # Usar cache para documentos gerados
def export_as_docx(content, filename="documento"):
    """Exporta o conte√∫do para um documento DOCX"""
    
    doc = docx.Document()
    
    # Adicionar t√≠tulo
    doc.add_heading(f"{filename}", 0)
    
    # Dividir por linhas e adicionar par√°grafos
    paragraphs = content.split('\n')
    for para in paragraphs:
        if not para.strip():
            continue
        
        # Verificar se √© um cabe√ßalho
        header_match = re.match(r'^(#{1,6})\s+(.*)', para)
        if header_match:
            level = min(len(header_match.group(1)), 9)  # Limitar a 9 para evitar erro
            text = header_match.group(2)
            doc.add_heading(text, level)
        else:
            doc.add_paragraph(para)
    
    # Salvar para um buffer em mem√≥ria
    buffer = BytesIO()
    doc.save(buffer)
    buffer.seek(0)
    
    return buffer

# Fun√ß√£o para gerar conte√∫do via API OpenAI - refatorada para melhor gerenciamento de erros e performance
def generate_content(prompt, model="gpt-3.5-turbo", temperature=0.7):
    """Gera conte√∫do via API OpenAI com tratamento de erros aprimorado"""
    
    # Verifica√ß√µes b√°sicas
    if not st.session_state.api_key_configured or not st.session_state.api_key:
        return "API n√£o configurada. Por favor, contate o administrador."
    
    # Verificar limites
    if st.session_state.token_count >= TOKEN_LIMIT:
        return "Voc√™ atingiu o limite de tokens para esta sess√£o. Por favor, tente novamente mais tarde."
    
    if st.session_state.request_count >= REQUEST_LIMIT:
        return "Voc√™ atingiu o limite de requisi√ß√µes para esta sess√£o. Por favor, tente novamente mais tarde."
    
    try:
        with st.spinner("Gerando conte√∫do..."):
            # Atualizar o timestamp da √∫ltima requisi√ß√£o
            st.session_state.last_request_time = time.time()
            
            # Incrementar contador de requisi√ß√µes
            st.session_state.request_count += 1
            
            # Configurar requisi√ß√£o direta √† API
            headers = {
                "Content-Type": "application/json",
                "Authorization": f"Bearer {st.session_state.api_key}"
            }
            
            # System prompt mais eficaz e direcionado
            system_prompt = """
            Voc√™ √© o NEXUS, um assistente especializado em comunica√ß√£o estrat√©gica e gerenciamento de projetos.
            Forne√ßa respostas profissionais, estruturadas e objetivas, focando em clareza e valor pr√°tico.
            """
            
            # Payload otimizado
            payload = {
                "model": model,
                "messages": [
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": prompt}
                ],
                "temperature": temperature,
                "max_tokens": 3000  # Reduzido para melhorar performance 
            }
            
            # Fazer a requisi√ß√£o √† API com timeout apropriado
            response = requests.post(
                "https://api.openai.com/v1/chat/completions",
                headers=headers,
                data=json.dumps(payload),
                timeout=30  # Reduzido para melhorar experi√™ncia do usu√°rio
            )
            
            # Processar a resposta
            if response.status_code == 200:
                result = response.json()
                content = result['choices'][0]['message']['content']
                
                # Atualizar contadores de tokens
                prompt_tokens = result['usage']['prompt_tokens']
                completion_tokens = result['usage']['completion_tokens']
                total_tokens = result['usage']['total_tokens']
                st.session_state.token_count += total_tokens
                
                # Registrar uso - apenas dados essenciais
                st.session_state.usage_data.append({
                    'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                    'feature': st.session_state.current_feature,
                    'tokens': total_tokens,
                    'model': model
                })
                
                # Adicionar ao hist√≥rico - vers√£o otimizada
                st.session_state.history.append({
                    'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                    'feature': st.session_state.current_feature,
                    'input': prompt[:100] + "..." if len(prompt) > 100 else prompt,
                    'output': content[:100] + "..." if len(content) > 100 else content,
                    'model': model
                })
                
                return content
            else:
                # Mensagem de erro mais detalhada e √∫til
                error_msg = response.json().get('error', {}).get('message', f"Erro {response.status_code}")
                return f"Erro na requisi√ß√£o: {error_msg}. Por favor, tente novamente."
        
    except requests.exceptions.Timeout:
        return "Tempo limite excedido ao tentar conectar com a API. Verifique sua conex√£o e tente novamente."
    except requests.exceptions.ConnectionError:
        return "Erro de conex√£o. Verifique sua internet e tente novamente."
    except Exception as e:
        return f"Erro inesperado: {str(e)}"

# Fun√ß√£o para criar cards de funcionalidades - redesenhada com grid mais responsivo
def create_feature_cards():
    """Cria os cards de sele√ß√£o de funcionalidades com design inspirado na Apple"""
    
    st.markdown('<div class="feature-grid">', unsafe_allow_html=True)
    
    for name, details in FEATURE_OPTIONS.items():
        icon = details["icon"]
        description = details["description"]
        color = details["color"]
        
        # HTML/CSS para criar cards mais modernos e responsivos
        card_html = f"""
        <div class="feature-card" id="card_{name.lower().replace(' ', '_')}">
            <div class="feature-icon" style="color: var(--{color});">{icon}</div>
            <h3>{name}</h3>
            <p>{description}</p>
            <div style="text-align: right;">
                <button 
                    onclick="document.getElementById('button_{name.lower().replace(' ', '_')}').click()"
                    style="background-color: var(--{color}); color: white; border: none; 
                           border-radius: 6px; padding: 8px 16px; font-size: 14px;
                           font-weight: 500; cursor: pointer; transition: all 0.2s;">
                    Selecionar
                </button>
            </div>
        </div>
        """
        
        st.markdown(card_html, unsafe_allow_html=True)
        
        # Bot√£o oculto para capturar o clique
        if st.button("Selecionar", key=f"button_{name.lower().replace(' ', '_')}", style="display: none;"):
            st.session_state.current_feature = name
            st.session_state.previous_screen = "home"
            st.rerun()

# Interface principal do aplicativo - completamente redesenhada
def main():
    """Fun√ß√£o principal do aplicativo - redesenhada para maior efici√™ncia e UX aprimorada"""
    
    # Renderizar o cabe√ßalho minimalista
    header()
    
    # Bot√£o VOLTAR quando estiver em uma funcionalidade - redesenhado
    if st.session_state.current_feature:
        if st.button("‚óÄÔ∏è Voltar", key="back_to_home", 
                    help="Voltar √† tela inicial", type="secondary"):
            st.session_state.current_feature = ""
            st.session_state.previous_screen = None
            st.rerun()
    
    # Exibir mensagem sobre vers√£o e uso do app
    with st.expander("‚ÑπÔ∏è Sobre o NEXUS", expanded=False):
        col1, col2 = st.columns(2)
        with col1:
            st.markdown(f"""
            **NEXUS - Assistente de Comunica√ß√£o**
            
            Facilite suas comunica√ß√µes de projeto com IA:
            * E-mails e relat√≥rios profissionais
            * Agendas e atas de reuni√µes
            * Simplifica√ß√£o de linguagem t√©cnica
            * Estrutura√ß√£o de feedback
            """)
        with col2:
            st.markdown(f"""
            **Uso atual:**
            * Requisi√ß√µes: {st.session_state.request_count}/{REQUEST_LIMIT}
            * Tokens: {st.session_state.token_count}/{TOKEN_LIMIT}
            
            Projeto desenvolvido por Ricardo Brigante
            """)
    
    # Hist√≥rico simplificado - apenas quando relevante
    if st.session_state.history and len(st.session_state.history) > 0:
        with st.expander("Hist√≥rico recente", expanded=False):
            # Mostrar apenas os √∫ltimos 3 itens para melhor performance
            for i, item in enumerate(reversed(st.session_state.history[-3:])):
                feature = item['feature']
                timestamp = item['timestamp']
                
                st.markdown(f"""
                <div class="history-item">
                    <p style="margin:0; font-weight:500;">{feature}</p>
                    <p style="margin:0; font-size:12px; color:var(--text-secondary);">{timestamp}</p>
                </div>
                """, unsafe_allow_html=True)
                
                col1, col2 = st.columns([3, 1])
                with col2:
                    if st.button(f"Carregar", key=f"load_{i}", type="secondary"):
                        st.session_state.current_feature = item['feature']
                        st.session_state.generated_content = item.get('output', "")
                        st.rerun()
    
    # Se nenhuma funcionalidade selecionada, mostrar a tela principal
    if not st.session_state.current_feature:
        st.markdown('<h2 style="font-size:24px; margin-bottom:16px;">Selecione uma funcionalidade</h2>', 
                   unsafe_allow_html=True)
        
        # Cards de funcionalidades redesenhados
        create_feature_cards()
        
    else:
        # Interface da funcionalidade selecionada
        current_feature = st.session_state.current_feature
        feature_details = FEATURE_OPTIONS[current_feature]
        
        # T√≠tulo da funcionalidade
        st.markdown(f"""
        <h2 style="font-size:24px; margin-bottom:16px; display:flex; align-items:center; gap:8px;">
            <span style="color:var(--{feature_details['color']})">{feature_details['icon']}</span>
            {current_feature}
        </h2>
        """, unsafe_allow_html=True)
        
        # Verificar limites antes de mostrar a interface
        if st.session_state.token_count >= TOKEN_LIMIT:
            st.error(f"Limite de tokens atingido. Por favor, tente novamente mais tarde.")
        elif st.session_state.request_count >= REQUEST_LIMIT:
            st.error(f"Limite de requisi√ß√µes atingido. Por favor, tente novamente mais tarde.")
        else:
            # Interface da funcionalidade com formul√°rio otimizado
            with st.form(key=f"{current_feature}_form", clear_on_submit=False):
                st.markdown('<div class="form-container">', unsafe_allow_html=True)
                
                # Campo de subtipo com descri√ß√µes mais claras
                subtype_options = feature_details['subtypes']
                subtype = st.selectbox("Tipo de comunica√ß√£o", 
                                      subtype_options,
                                      help="Selecione o tipo espec√≠fico de conte√∫do que voc√™ precisa")
                
                # Layout adaptativo - comportamento responsivo para mobile
                is_mobile = st.checkbox("Otimizar para visualiza√ß√£o em dispositivo m√≥vel", 
                                      value=False, 
                                      help="Ative para melhor visualiza√ß√£o em telas pequenas",
                                      key="mobile_toggle")
                
                # Campos comuns a todas as funcionalidades (exceto PMBOK)
                context = ""
                if current_feature != "Consultor PMBOK 7":
                    context_height = 80 if is_mobile else 120
                    context = st.text_area("Contexto do projeto", 
                                        help="Descreva brevemente o projeto e sua situa√ß√£o atual",
                                        height=context_height,
                                        placeholder="Ex: Projeto de app mobile em fase de testes")
                
                # Prompt padr√£o que ser√° personalizado por funcionalidade
                prompt = ""
                
                # Campos espec√≠ficos por funcionalidade - redesenhados para UX melhorada
                if current_feature == "Gerador de Comunica√ß√µes":
                    # Layout adaptativo para campos
                    field_height = 80 if is_mobile else 120
                    
                    audience = st.text_input("Destinat√°rio", 
                                        help="Para quem esta comunica√ß√£o ser√° enviada",
                                        placeholder="Ex: Cliente, diretor de marketing")
                    
                    key_points = st.text_area("Pontos principais", 
                                            help="Liste os pontos essenciais a incluir",
                                            height=field_height,
                                            placeholder="Ex: Atraso de 3 dias, plano de recupera√ß√£o...")
                    
                    tone = st.select_slider("Tom da comunica√ß√£o", 
                                        options=["Muito Formal", "Formal", "Neutro", "Amig√°vel", "Casual"],
                                        value="Neutro")
                    
                    prompt = f"""
                    Gere um {subtype} com base nas seguintes informa√ß√µes:
                    
                    Contexto do Projeto: {context}
                    Destinat√°rio: {audience}
                    Pontos principais: {key_points}
                    Tom desejado: {tone}
                    
                    Formate a sa√≠da adequadamente para um {subtype}, incluindo assunto/t√≠tulo e estrutura apropriada.
                    """
                
                elif current_feature == "Assistente de Reuni√µes":
                    # Layout adaptativo para campos
                    field_height = 80 if is_mobile else 120
                    
                    participants = st.text_area("Participantes", 
                                            help="Liste os participantes e suas fun√ß√µes",
                                            height=field_height,
                                            placeholder="Ex: Jo√£o (Gerente), Maria (Dev)")
                    
                    topics = st.text_area("T√≥picos", 
                                        help="Liste os t√≥picos a serem discutidos",
                                        height=field_height,
                                        placeholder="Ex: Cronograma, bugs pendentes, feedback")
                    
                    # Valor padr√£o mais realista
                    duration = st.number_input("Dura√ß√£o (minutos)", 
                                            min_value=15, 
                                            max_value=180, 
                                            value=30, 
                                            step=15)
                    
                    if subtype == "Agenda de Reuni√£o":
                        prompt = f"""
                        Crie uma agenda para reuni√£o de {duration} minutos com:
                        
                        Contexto: {context}
                        Participantes: {participants}
                        T√≥picos: {topics}
                        
                        Inclua aloca√ß√£o de tempo e objetivos claros para cada item.
                        """
                    elif subtype == "Ata de Reuni√£o":
                        # Campos adicionais apenas quando relevantes
                        decisions = st.text_area("Decis√µes tomadas", 
                                            height=field_height,
                                            placeholder="Ex: Aprova√ß√£o do design, extens√£o de prazo")
                        
                        actions = st.text_area("A√ß√µes acordadas", 
                                            height=field_height,
                                            placeholder="Ex: Jo√£o: corrigir bug #123 at√© amanh√£")
                        
                        prompt = f"""
                        Crie uma ata detalhada para reuni√£o de {duration} minutos:
                        
                        Contexto: {context}
                        Participantes: {participants}
                        T√≥picos: {topics}
                        Decis√µes: {decisions}
                        A√ß√µes: {actions}
                        
                        Organize por t√≥picos, destacando decis√µes e pr√≥ximos passos.
                        """
                    else:  # Follow-up
                        meeting_outcome = st.text_area("Resultado da reuni√£o", 
                                                height=field_height,
                                                placeholder="Ex: Definidas prioridades para o sprint")
                        
                        action_items = st.text_area("Itens de a√ß√£o", 
                                                height=field_height,
                                                placeholder="Ex: Jo√£o: revis√£o at√© 25/03")
                        
                        prompt = f"""
                        Crie uma mensagem de follow-up para reuni√£o:
                        
                        Contexto: {context}
                        Participantes: {participants}
                        T√≥picos: {topics}
                        Resultado: {meeting_outcome}
                        A√ß√µes: {action_items}
                        
                        A mensagem deve agradecer a participa√ß√£o, resumir pontos principais e detalhar pr√≥ximos passos.
                        """
                
                elif current_feature == "Tradutor de Jarg√£o":
                    # √Årea de texto maior para conte√∫do t√©cnico
                    content_height = 150 if is_mobile else 200
                    
                    technical_content = st.text_area("Conte√∫do t√©cnico", 
                                                help="Cole o texto t√©cnico a ser traduzido",
                                                height=content_height,
                                                placeholder="Cole aqui o texto com jarg√£o t√©cnico...")
                    
                    audience = st.selectbox("P√∫blico-alvo", 
                                        ["Executivos", "Clientes n√£o-t√©cnicos", "Equipe de Neg√≥cios", "Equipe T√©cnica Junior"])
                    
                    key_concepts = st.text_input("Conceitos-chave a preservar", 
                                            placeholder="Ex: API, front-end, estado")
                    
                    prompt = f"""
                    Adapte o seguinte conte√∫do t√©cnico para {audience}:
                    
                    Contexto: {context}
                    Conte√∫do Original: {technical_content}
                    Conceitos a preservar: {key_concepts}
                    
                    Para {audience}, foque em: 
                    {'Impacto nos neg√≥cios e resultados' if audience == 'Executivos' else
                    'Benef√≠cios e funcionalidades em linguagem acess√≠vel' if audience == 'Clientes n√£o-t√©cnicos' else
                    'Conex√£o com objetivos de neg√≥cios' if audience == 'Equipe de Neg√≥cios' else
                    'Explica√ß√µes t√©cnicas mais detalhadas com conceitos explicados'}
                    
                    Mantenha a precis√£o conceitual mesmo simplificando a linguagem.
                    """
                
                elif current_feature == "Facilitador de Feedback":
                    # Layout adaptativo
                    field_height = 80 if is_mobile else 120
                    
                    situation = st.text_area("Situa√ß√£o", 
                                        help="Descreva a situa√ß√£o espec√≠fica para feedback",
                                        height=field_height,
                                        placeholder="Ex: Atraso na entrega de componentes...")
                    
                    strengths = st.text_area("Pontos fortes", 
                                        height=field_height,
                                        placeholder="Ex: Qualidade do c√≥digo, comunica√ß√£o")
                    
                    areas_for_improvement = st.text_area("√Åreas para melhoria", 
                                                    height=field_height,
                                                    placeholder="Ex: Estimativas irrealistas, bloqueios")
                    
                    relationship = st.selectbox("Rela√ß√£o com o receptor", 
                                            ["Membro da equipe", "Colega", "Superior", "Cliente", "Fornecedor"])
                    
                    prompt = f"""
                    Estruture um {subtype} construtivo com base em:
                    
                    Contexto: {context}
                    Situa√ß√£o: {situation}
                    Pontos fortes: {strengths}
                    √Åreas de melhoria: {areas_for_improvement}
                    Rela√ß√£o: {relationship}
                    
                    O feedback deve ser espec√≠fico, equilibrado, incluir exemplos e oferecer sugest√µes acion√°veis.
                    Formate como um roteiro que o usu√°rio pode seguir na conversa.
                    """
                
                elif current_feature == "Detector de Riscos":
                    # √Årea maior para o conte√∫do a analisar
                    content_height = 150 if is_mobile else 200
                    
                    content_to_analyze = st.text_area("Conte√∫do para an√°lise", 
                                                    help="Cole o texto a ser analisado",
                                                    height=content_height,
                                                    placeholder="Cole o texto para identificar riscos...")
                    
                    audience = st.text_input("P√∫blico-alvo", 
                                        placeholder="Ex: Cliente executivo com conhecimento t√©cnico limitado")
                    
                    stakes = st.select_slider("Import√¢ncia da comunica√ß√£o", 
                                            options=["Baixa", "M√©dia", "Alta", "Cr√≠tica"],
                                            value="M√©dia")
                    
                    prompt = f"""
                    Analise o seguinte {subtype} quanto a riscos de comunica√ß√£o:
                    
                    Contexto: {context}
                    P√∫blico: {audience}
                    Import√¢ncia: {stakes}
                    
                    Conte√∫do:
                    ---
                    {content_to_analyze}
                    ---
                    
                    Identifique:
                    1. Ambiguidades e informa√ß√µes confusas
                    2. Poss√≠veis mal-entendidos baseados no p√∫blico
                    3. Problemas de tom ou linguagem inapropriada
                    4. Informa√ß√µes sens√≠veis ou potencialmente problem√°ticas
                    5. Sugest√µes espec√≠ficas de melhoria
                    
                    Forne√ßa uma avalia√ß√£o geral e uma vers√£o revisada completa do texto.
                    """
                
                elif current_feature == "Consultor PMBOK 7":
                    # Layout simplificado para consultas PMBOK
                    pmbok_topic = subtype
                    field_height = 100 if is_mobile else 150
                    
                    project_context = st.text_area("Contexto do projeto", 
                                            height=field_height,
                                            placeholder="Ex: Projeto de software com metodologia h√≠brida...")
                    
                    specific_question = st.text_area("Sua d√∫vida espec√≠fica", 
                                                height=field_height,
                                                placeholder="Ex: Como aplicar os princ√≠pios de valor do PMBOK 7...")
                    
                    experience_level = st.select_slider("Seu n√≠vel de experi√™ncia", 
                                                    options=["Iniciante", "Intermedi√°rio", "Avan√ßado"],
                                                    value="Intermedi√°rio")
                    
                    # Campo opcional com visualiza√ß√£o condicional
                    show_org_context = st.checkbox("Adicionar contexto organizacional", value=False)
                    organization_context = ""
                    if show_org_context:
                        organization_context = st.text_input("Contexto organizacional",
                                                        placeholder="Ex: Empresa de m√©dio porte do setor financeiro")
                    
                    base_prompt = f"""
                    Forne√ßa orienta√ß√£o sobre "{pmbok_topic}" do PMBOK 7:
                    
                    Contexto: {project_context}
                    D√∫vida: {specific_question}
                    N√≠vel de experi√™ncia: {experience_level}
                    {"Contexto organizacional: " + organization_context if organization_context else ""}
                    
                    Sua resposta deve:
                    1. Explicar conceitos relevantes do PMBOK 7
                    2. Fornecer orienta√ß√µes pr√°ticas para o contexto espec√≠fico
                    3. Incluir exemplos concretos de aplica√ß√£o
                    4. Destacar boas pr√°ticas considerando o n√≠vel de experi√™ncia ({experience_level})
                    
                    Formate a resposta de maneira estruturada e objetiva.
                    """
                    
                    # Enriquecemos o prompt com informa√ß√µes relevantes do PMBOK 7
                    prompt = enrich_pmbok_prompt(base_prompt, pmbok_topic)
                
                st.markdown('</div>', unsafe_allow_html=True)
                
                # Bot√£o de gera√ß√£o mais atraente
                st.markdown("""
                <style>
                    /* Estilo Apple para o bot√£o de submit */
                    button[type="submit"] {
                        background-color: var(--primary);
                        color: white;
                        border: none;
                        border-radius: 8px;
                        padding: 12px 24px;
                        font-weight: 500;
                        font-size: 15px;
                        width: 100%;
                        cursor: pointer;
                        transition: all 0.2s;
                        margin-top: 8px;
                    }
                    
                    button[type="submit"]:hover {
                        background-color: #0062CC;
                        box-shadow: 0 4px 10px rgba(0,0,0,0.1);
                    }
                </style>
                """, unsafe_allow_html=True)
                
                submit_col1, submit_col2, submit_col3 = st.columns([1, 2, 1])
                with submit_col2:
                    submit_button = st.form_submit_button("GERAR CONTE√öDO")

            # Processamento ap√≥s o envio do formul√°rio
            if submit_button:
                # Verificar API e limites novamente
                if not st.session_state.api_key_configured:
                    st.error("API n√£o configurada. Por favor, contate o administrador.")
                elif st.session_state.token_count >= TOKEN_LIMIT:
                    st.error(f"Limite de tokens atingido.")
                elif st.session_state.request_count >= REQUEST_LIMIT:
                    st.error(f"Limite de requisi√ß√µes atingido.")
                else:
                    # Feedback visual de carregamento melhorado
                    with st.status("Gerando conte√∫do personalizado...", expanded=True) as status:
                        st.write("Processando sua solicita√ß√£o...")
                        
                        # Gerar conte√∫do com modelo apropriado
                        model = "gpt-3.5-turbo"  # Modelo padr√£o
                        temperature = 0.7        # Criatividade padr√£o
                        
                        # Ajustar modelo e temperatura baseado na funcionalidade
                        if current_feature in ["Detector de Riscos", "Consultor PMBOK 7"]:
                            temperature = 0.3  # Menos criatividade para an√°lises
                        
                        generated_content = generate_content(prompt, model=model, temperature=temperature)
                        st.session_state.generated_content = generated_content
                        
                        # Atualizar status
                        status.update(label="Conte√∫do gerado com sucesso!", state="complete", expanded=False)
                    
                    # Exibir resultado em container estilizado
                    st.markdown('<div class="result-container">', unsafe_allow_html=True)
                    st.markdown("### Resultado")
                    
                    # Container com estilo aprimorado para o resultado
                    st.markdown(f"""
                    <div style="background-color: white; border-radius: 12px; padding: 20px; 
                                border: 1px solid var(--border); margin-bottom: 20px;">
                        <div style="white-space: pre-wrap; font-size: 15px; line-height: 1.5;">
                            {generated_content.replace('\n', '<br>')}
                        </div>
                    </div>
                    """, unsafe_allow_html=True)
                    
                    st.markdown('</div>', unsafe_allow_html=True)
                    
                    # Bot√µes de a√ß√£o para o resultado
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        # Voltar para editar
                        if st.button("‚úèÔ∏è Editar solicita√ß√£o", key="edit_request", type="secondary"):
                            # Manter o current_feature, apenas limpar o resultado
                            st.session_state.generated_content = ""
                            st.rerun()
                    
                    with col2:
                        # Download como texto
                        st.download_button(
                            label="üìÑ Baixar como TXT",
                            data=generated_content,
                            file_name=f"nexus_{subtype.lower().replace(' ', '_')}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                            mime="text/plain",
                            key="download_txt"
                        )
                    
                    with col3:
                        # Download como DOCX
                        docx_buffer = export_as_docx(generated_content, filename=f"NEXUS - {subtype}")
                        st.download_button(
                            label="üìù Baixar como DOCX",
                            data=docx_buffer,
                            file_name=f"nexus_{subtype.lower().replace(' ', '_')}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.docx",
                            mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                            key="download_docx"
                        )

# Iniciar a aplica√ß√£o
if __name__ == "__main__":
    main()
